# Databricks notebook source
import tensorflow as tf
import numpy as np
from numba import njit
from datetime import datetime

# COMMAND ----------

INPUT_FILE = 'processed_all_years.csv'
OUTPUT_FILE = "test_iw_no_train.keras"
RESULTS_FILE = 'test_iw_no_train_results.txt'

LEARNING_RATE = 1e-4
NUM_UNIT_ACTIONS = 200
SMART_INIT = True
EFFICIENCY_WEIGHTING = 0
TRAINING = True

print(datetime.now(), 'Beginning Run',  file=open(RESULTS_FILE, 'w'))
print('LEARNING_RATE:', LEARNING_RATE,  file=open(RESULTS_FILE, 'a'))
print('NUM_UNIT_ACTIONS:', NUM_UNIT_ACTIONS,  file=open(RESULTS_FILE, 'a'))
print('EFFICIENCY_WEIGHTING:', EFFICIENCY_WEIGHTING,  file=open(RESULTS_FILE, 'a'))

# COMMAND ----------

STATE_HISTORY = 12 * 60

min_mw = np.array([0, 0, 0, 0, 0, 0, 0, 0])
max_mw = np.array([ 78., 112.,  74., 116., 352.,  54., 192., 96.])
min_flow = np.array([50, 50, 0, 0, 0, 0, 0, 0, 148])

min_station_mw = np.array([13, 0, 0, 0, 0, 0, 0, 0, 40])
min_unit_mw = np.array([13, 15, 5, 19, 5, 8, 14, 12, 14])
efficient_min_unit = np.array([22, 23, 16, 28, 28, 9, 23, 17, 24])
efficient_max_unit = np.array([25, 28, 20, 31, 33, 16, 24, 20, 28])
max_unit_mw = np.array([26, 28, 21, 31, 36, 18, 27, 22, 36])
mw_per_cumec_benchmark = np.array([0.315     , 0.28957301, 0.20617799, 0.343658  , 0.54511601,
       0.142931  , 0.46399999, 0.270711  ])

#Type,a,b,c,d,e,f,g,h
twl_constants = np.array([
  [0,300.31159544,0.11789130,0.63402890,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000],
  [1,249.00000200,0.02474518,0.85229297,-616.63070700,2.47618567,86.49277540,-0.34733415,66.02371370],
  [1,224.35001100,0.05956619,0.71806377,-416.64303300,1.85809575,61.91323780,-0.27621259,24.42714720],
  [1,184.97992400,0.00000282,2.00383979,-986.64648500,5.24448743,108.96544800,-0.57692694,1568.03023000],
  [1,125.00000000,0.10000000,0.59532498,-234.11612500,1.87984510,26.68075530,-0.21643412,31.17994410],
  [1,107.56019000,0.02892442,0.78252155,-250.26168000,2.33913909,32.07244600,-0.30108899,81.32933610],
  [0,54.30000000,0.00083771,1.35151747,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000],
  [0,19.88189310,0.00850920,1.00000000,0.00000000,0.00000000,0.00000000,0.00000000,0.00000000]
], dtype=np.float32)

# COMMAND ----------

# setpoints_arr = setpoints_arr[~np.any(np.isnan(setpoints_arr), axis=1), :]
setpoints_arr = np.genfromtxt(INPUT_FILE, delimiter=',')

# COMMAND ----------

# train_indices = np.random.choice(train_val_split - 720 - 10000 - 3600, size=3000) + 720
# np.set_printoptions(threshold=np.inf)
train_indices = np.array([ 398992,  647193,  910409,   38713,  873393,  827888,  962068,
        614038,  389549,  585379,  680883,  599205,  217324,  734848,
        174402,  986442,  522160,  536739,  729886,  347661,  940177,
        409813,  736073,  655897,  721078,  171019,  657247,  889890,
        669547,  381780,  265665,  545454,   55769,  324217,  820323,
        801353,  741068,  190092,  708182, 1007596,  370507,  546602,
        283045,  506883,  274143,  252919,  563709,  960731,  289716,
        661744,  864751,  744291,  899930,  480192,  561682,  359226,
        258295,  217079,  258374,   47170,  717133,  746902,  337377,
        471357,   75308,  463723,  510374,   87062,  990407,  161724,
        261906,  979060,  621884,  653645,  464346,  760596,  250362,
        978606,  119684,  650547,  171648,  594373,  936805,  973776,
        572273,  583831,  475621,  933997,  228412,  862975,  363202,
        309285,  869387,  782344,  666923,  781376,  262635,  442570,
        646645,  899848,  161805,  684715,  490662,  111946,  630870,
        410234,  760048,  447374,   74214,  338293,  137707,   70836,
        323311,  936915,  203452,  588217,  936402,    2294, 1012180,
        478878,   78795,  551929,   84341,   98972,  392371,  855023,
        533459,   41253,  436773,  265569,  580669,  180542,  681305,
        480466,  543863,  890789,  497790,  905519,  881612,  649764,
        665892,  909126,  866500,  439173,  313411,  677663,  347934,
        255355,  434958,   28746,  784509,   64049,  867101,  783238,
        210097,  304195,  498564,  362904,  221057,  685125,  570101,
        210768,  112068,  902896,  437404,  506717,  191763,  612579,
        427329,  957464,  177575,   94461,  226525,  897129,  997866,
        311054,  821062,  136712,   57608,  893852,  672543,  411581,
        277359,  295087,  951241,  548768,  271303,  529609,  993531,
        156355,  430198,  227240,  846827,  183027,  692892,  540216,
        840131,  486348,  237005,  779716,  932261,  324455,  562980,
        544664, 1027767,  527782,  994169,  314740,   22880,   34683,
        114153,  181528,  864608,  450459,   66435,  372360,  249114,
        109635,  919122,  647682,  680360,  110057,  847129,  437133,
        921740,  449100,  121717,  561635,  684623,  131420,  442065,
        762471,  684888,  773375,  371923,  698792,  450578,   28223,
        438329,  534498,  133008,  349086,  736254,  423958,  593357,
        436668,  459922,  242886,  786778,  625236,  265030,  672358,
        933622,  267968,  834767,  715584,  787288,  771238,  290998,
        576008,  493301,  481983,  592941,   69552,  577192,  491922,
        288981,  428251,  569397,  979137,  213898,  301153,  526437,
       1002773,  986278,  756548,  428795,  692068,  363146,  236476,
        370548,  256846,  710853,  521437,  506755,  432965,  244235,
        727920,  979122,   94417,  465678,  390785,  152427,  307703,
        755283,  443524,  465423,  823053,  348670,  488768,  858084,
        648450,  836120,  392702,  393862,  326778,   44878,  956094,
         45260,  330670,  793076,  199760,  540030,   99830,  323102,
        885036,  822044,  103410,  908840, 1011647, 1002849,  965235,
        316549,  962689,  522964,  601483,  403997,  811708,  558539,
        201861,  547763,  796875,   46811,  228963,  554756,  870749,
        989438,  507574,  884596,   93661,  896687,  937497,  210999,
        930664,  654040,  671620,  682503,   88666,  294004,   90810,
         45927,  415756,  173246,  915924,  820377,  675421,  255278,
         31986,   50031,  509549,  690428,  787245,  787768,   48433,
        576938,  900971,  755448,  713887,  614136,  730719,  605963,
        387678,  979024,  434979,   58296,  208450,  418183,  130691,
        441258,   48732,   60112,  780226,  612696,   51779,  622752,
        490124,  677589,  364690,  124253,  182661,  553841,  391899,
        943928,   33372,  838012,  538768,  400543,  592007,  862773,
        313662,  370451,  696845,  928243,  299949,  203803,  588975,
        678040,  984347,  954829, 1030108,  586916,  259674,  876438,
         14737,  812632,  796288,  738358,  865998,  654035,  923023,
        786886,  268769,  822657,   51937,  269727,  903139,  552525,
        675355,  336270,  954012,  726203,  819619,  822773,  798348,
        953058,  726524,  528079,  820236,  559540,  506597,  725940,
        870488,  267851,  372706,  284072,  402061,  954412,  774266,
        611960,  680520,  265747,  831453,  681979,  852771,  135652,
         79666,  756591,  112230,  627217,  714479,  361344, 1023238,
        722273,  694297,  114071,  713042,  501307,  205593,  640317,
        624362,  308464,  805307,  943120,   15146,  211231,  225311,
        450062,  569506,  341728,  632771,  894578,  461331,  828084,
        414472,  469981,  322852,  324939,  643092,  488804,  198698,
        586390,  300021,  586883,  922394,   87651,  208494,  541737,
        737906,  902449,   35401,  655521,  784279,  996909,   80276,
        882192,  187013,  296916,  627701,  266880,  507463,   43921,
        339192,  411044,  794676,  802274,  229406,  260261,  267783,
        513331,  191635,   19485,  575129,  339113,  665010,  713706,
        770669,  674531,  512462,  896286,  443344,  221556,  180422,
        926527,  188136,  989900,  145944,  360386,  459449,  794688,
        797401,  438814,  304748,  751930,  438530,  196632,  197813,
        139692,  744096,  488983,  306733,  992004,  356610,  318202,
        453525,  164297,  657728,  669561,  715095, 1021521,   34061,
        215545,  920331,   78594,  401802,  872472,  994825,  534636,
        919758,  363329,  723772,  754446,  673211,  772255,  766579,
        616973,  989015,  697177,  369131,  369063,  178592,  713317,
        918521,  568657,  813848,   21173,  899571,  915764,  523960,
        721579,  966240,  547456,  558249,  258065,  396158,  107810,
        411794,   22205,   61718,  513185,  778772,  443139,  667476,
        273732,  678304,   98596,  247306,  793280,  794359,  897008,
         77819,   23102,  133637,  217310,   40092,  888188,  499998,
        266081,  601715,  380530,  780283,  685358,  748741,  204322,
        724442,  212272,  736927,  307221,  522208,  333494,  584093,
        907018,  880146,  937638,  681935,  861610,  913522,  376827,
        935473,  519274,  298446,   90723,  578751,   63454,  346765,
        899905,  764196,  215461, 1008650,  433867,   99243,  893369,
        504941,  685557,  887351,  726828,  425941,  444555,   75852,
        737705,  530183,  930089,  326514,  419852,  575288,  550355,
        967596,  658392,  986308,  215271,  962125,  737452,  514123,
        162005,  629458,  892688,  527936,   62961,  206679,  772983,
        235848,   79939,  818516, 1006232,  151304,  848802,  827826,
        785525,  627922,  444861,  538218,  531923,  795518,  734429,
        703818,   68680,  534467,  773943,  808800,  752804,  103637,
        578034,  722894,   77241,  963374,  553349,  722277,  616783,
        664079,  757728,  662797,  547068,  245296,  660011,  305311,
         28355,  798687,  383252,  973841,  491075,  356360,  245262,
        383704,   12513,  630266,  290225,  115151,  738277,   56397,
        579752,  425736,  689835,  240884,  547657,  188575,  564409,
          7306,  946015,   52821,  609561,  201697,  606247,  978677,
        914297,  464074,  582832,  590879,  108856,  387632,  474471,
       1003381,  361798,  776930,  484153,  699635,  624995,  377760,
        160638,  248715,  359741,  354174,  659320, 1014630,   19843,
         98059,  296196,  824636,  705127,  154446, 1024635,  314987,
        884214,  614703,  295992,  934554,  876736,  339565,  758483,
        610822,  165314, 1024338,  611562,   28913,   82195,  883389,
        672316,  495929,  775615,  746678,  826203,  679794,  764833,
        359822,  116245,  489351,  568321,  361928,  660029,  836005,
        269579,  147734,   62608,  889157,  332547, 1026036,  354537,
        489838,  262498,  819380,  152116,  216414, 1031859,  236752,
        692614,   30703,  593688,  402770,  486234,   45627,   97866,
        730746,  114467,  905422,  158112,  267044,  101278,   27289,
        208404,  372128,   84495,  542062,  562392,  833236,  754425,
        845741,  316815,  175703,  374671,  497511,  842600,  476978,
         61636,  915092,  453114, 1009381,  492707,  898630,  195156,
        984134,  327582,  408054,  842016,  495398,  664344,  298336,
         50980,  701856,  416364,  932526,  377583,  635890,  819882,
        747816,  731512,  614384,  445206,  928590,  821495,  981707,
        483872,  460102,  410000,  286582,  591635,   15342,  900249,
        767069,  267297,  980570,  504716,  494316,  792173,  527448,
        396446,  409716,  275904,    1721,   12529,  283979,  251376,
        672927,  437535,  627297,  136228,  921482,  332673,  459153,
        173675,  346081,  361662,  774626,   11927,  359702,  854247,
        314059,  306339,  917059,  694427,   73090,  265556,  977697,
        581438,  781523,  837677,  248777,  917558,  533205,  101541,
        192086,  687507,  676954,  453076,  555331,  858128, 1019335,
        618266,  280896,  240490,  412103,  542739,  621349,  600860,
        547059,  925973,  430070,  926952,   12084,  829101,  824309,
        613092,  257594,  109081,  204569,  174434,   50793,  270053,
        364592,  226311,  519820,  762100,   79763,  650624,  459129,
        153144, 1010731,  350840,  277942,  942440,  422883,   55012,
        289773,  331773,  745973,  814010,  160297,  477270,  829584,
        647072,  779327,  808640,   79875,  383967,  889030,  706114,
        737204,  576922, 1009404,  478226,  553315,  597730,  681672,
        154773,   53650,  461371,  822757,  793677,  690099,  527158,
        550789,  161589,  318900,   59166,  368774,  756342,  682334,
        647993,  873688,  475163,  253137,  270992,  638427,  167219,
        124610,   27830,   24457,   14755,  350303,  958918,  225399,
        472218,  833213,  649412,  665538,  550829,   31308,  206946,
        431456,   91433,   65041,  867789,  716674,  343150,  171862,
        795696,  440026,  369683,  570424,  222039,  368194,   48906,
        173162,  816249,  221944,  558720,  236102,   11258,  684705,
        588511,  655748,  242936,  835327,  412609,  625219,  898317,
        690042,  310314,  277771,  982779,  369556,  182320,  250685,
        724447,  274855,  873800,  258133,  154228,  551711,  380731,
        425900,  206325,  670939,  491578,  623143,  754677,  827566,
        822782,  165883,  138783,  836117,   69116,  289779,  913042,
        500929,  575891,  897492,  304252,  803511,  590109,  320123,
        487473,   30653,  224024,  360336,  727853,  111440,  131497,
        771205,  251454,  829472,   97446,  238431,  844646,  956887,
        572634,  351969,  716508,  536922,  741668,  818930,  164071,
        669661,  484157,   44752,  543170,  566476,  189055,  725523,
        134851,  361913,  875124,  248296,  408702,  308786,  931054,
        310062,  929411,  573229,  887638,  270650,  644292,  319309,
        877259,  715031,  870385,   58045,  970947,  662697,  554619,
        524714,  426423,  598411,  211466,  532856,  623987,  981080,
        761383,  209713,  604683,  509769,  975641, 1026485,  226663,
        668712,   45542,  206261,  761235,  584976,  322437,   47475,
        246207,  944528,  955668,  410980,  181358,  741260,   23591,
        379812,  642122,  380070,  863895,  562536,   36189,  278677,
        927576,  479163,  439277,  319090,  237110,  403114,  830123,
        704519,  605346,  645190,   80997,  127705,   45336,  531801,
        975627,  183522,  236117,  697020,  322089,  138061,  842439,
        975615,  248464,  990610,  152662,  537934,  232622,  360199,
        466731,  646653,  132558,  977579,  695604,  998962,  227763,
        101782,  932939,   75655, 1008355,  249228,  670724,  157611,
        580973,   20942,  354291,   85927,  931311,   87011,  943395,
        101734,  808592,  725608,  557437,  453071,  867072,  379498,
        453986,  593701,  962294,  662938,  999504,  913411,    7514,
        712735,  237167,  995625,  452379,  285122,   83764,  709907,
        340222,  910112,  226741,  878423,  291403,  585450,  711029,
       1029383,  209629,  651177,  591766,   48814,  673639,  575709,
          9070,  385052,  395251,  970221,  368446,  585199, 1021230,
        248195,  299219,  268118,  228386,  531391,  651697,  439491,
        691916,  589519,  835938,   16488,  955316,  341821, 1002863,
        958804,  103902,  702455,  862358,   32364,  438502,  734767,
        989400,  616524,  468265,    1245,  708656,  180559,  999159,
        380411,  448975,  890204,   49112,   56665,  926063,  585236,
        418855,  150774,  477710,  723594,  840427,  117828,  814432,
         67469,  576003,  771371,  133140,   64015,  302387,  803674,
        644456,  988635,  142487,  779250,   25537,  928701,  854484,
        749967,  342618,  428159,  912384,  139365,   90629,  658408,
        652850,  388319,  301491,  928091,  683776,  383633, 1016833,
        810326,  539772,  454331,  806862,  654165,  960491,  308080,
        556420, 1011816,  190915,  244921,  103395,  693921,  530897,
         52663,  978330,  754383,  256990,  451408,  342491,   81718,
        482758,  983327,  128177,  673600,  831700, 1014505,  986300,
        769446,  182614,  136371,  605010,  381184,   63037,   44971,
        485461,  249775,  867618,  563788,   75118,  617920,  653125,
        592034,  280535,   40775,  739007,  320184,  167939,  776829,
        759073,  178919,  246436,  712356,  765023,  611404,  806255,
        727761,  702681,  510033,  905359,  923800,  842095,   52117,
          3845,  105682,  848314,  877241,  530378, 1001002,  312265,
        315616,  810452,  565027,  454875, 1000465,  809269,    1360,
         41090,   81183,  377713,  831541,   89419,   41339,  933298,
        355669,  139689,   58988,  269587,  280968,  947608,  668156,
        424141,  237403,  986674,  170844,  965558,  971623,  814015,
        164196,  996821,  815966,  118130,  384130,  378433,  178846,
        221242,  563146,  181502,  579752,  743019,  444155,  580048,
        240197,  740522,  301425,  116658,  871208,   80485,  437033,
        187492,  183665,  890443,  241357,  352682,  816136,  113426,
       1026163, 1011599,  532043,  946105,  170105,  933029,  782376,
        944482,  658821,  703783,  106896,  879400,  953189, 1007929,
         76406,  297973,  180065,  885307,  511169,  366712,  291536,
        115187,  308694,  741139,  144201,  221868,  898554,  690443,
       1003926,  680174,  407767,  605445,  416109,  235049,  703148,
        567305,  368419,  367555,  939494,  268225,  281947,  130223,
        840442,  521271,  413953, 1004579,  591583,  544656,  788028,
        518693,  412341,  503523,  225518, 1030841,  271838,  604716,
        240508,  183192,  337830,  617017,  485936,  263922,  723158,
        616300,  549437,   22996,  981780,  107969,  891306,  107487,
        176923, 1030538,  707983,  144080,  567990,  313703,  595164,
        505654,  709346,  455822,   25576,  497254,    9633,  855894,
        246034,  373029,  416246,  495603,  825718,  393925,  662219,
        266438,  367230,  403001,  766359,  617223,  374207,  954122,
        722589,   36705,  132599,  361588,  469052,  368057,  313048,
       1003200,  520868,  951955,  888318,   88264,  211133,  108346,
        149857,  128863,  319063,  440326,  883947,    3601,  448816,
        735522,  363865,  489874,  475300,  768015,  103899,  589127,
        780070,  762830,  703772,  538208,  195474,  584841,   25301,
        277362,  433486,  105688,   16090,  219284,  395757,  447392,
        195397,  674628,  123137,  996441,  568316,  678572,  194656,
        246603,  362329,  908230,  695130,  490479,  345094,  305392,
        907243,   61838,  797204,  702713,  930038,  671171,   53071,
        106620,  138938,  697759,  470428,  215941,  998816,  577827,
        468337,  112807,  740496,  143299,   65727, 1027592,  529279,
        427717,  186760,  796227,  317091,  289584,  986483,  924093,
        271027,  215593,  895799,  284293,  142930, 1007347,  413224,
        192981,  422678,  374883,  580184,  541917,   86686,   97395,
        878548,  678619,   85567,  219160,  741589,  478306,  279642,
        395592,  679449,   12655,  315612,  384097,  671010,  936550,
        791539,  834940,  428879,  293369,  580999,  724318,    2245,
        251382,  712606,  432358,  484768,  568292,  776229,  631760,
        981194,  894880,  106903,  855099,  968882,  788911,  489565,
        705727,  937438,  328631,   90272,  455670,  129009,  529636,
        819692,  191409,  680165,  369928,  337410,  681419,  845727,
        585114,  884614,    5230,  181386,  257269,  224512,  288783,
         32978,  627521,  534215,  103399,  926535,  696579,  722419,
        635748,  285310,  473434,  620247,  903723,  925200,  715187,
        193841,  838494,   18019,  703850,   16400,  287660,  997020,
        699557,  630516,  488301,  103659,  387114,  714024,  166622,
        958034,  938005,  843907,   93163,   59495,   85310,  941183,
        486086,   89505,   43171,  498200,  324769,  408104,  435606,
        854508,  526783,  770464,   28030,  917502,   29195,  650468,
        121877,  848616,   20624,  213303,  501180, 1006979,  844652,
         77228,  704016,  561303,  621239,  124548,  329621,  963971,
        305146,  740886,  353710,  432021,  250777,  612397,   63306,
        628487,  784844,   88189,  112405,  446530,  824789,   70802,
        383972,  248577,   54759,  921147,  472723,  560025,  825472,
        965474,  202387,  634294,  395365,  395067,  821841,  402257,
        849405,  884994,  579944,  949758,  606541,  545809,  515793,
        943382,  674103,  381747,  816561,   34096,  614251,  816788,
        182935,  947446,  727321,  220206,  595688,  119971,  706862,
        457781,  507393,  356944,  673998,  807979,  171496,  607589,
        378096,  108214,  241567,  710360,  294783,  401429,  361486,
        715309,   41357, 1029655,   80204,   34057,  774224,  270131,
        703930,  556108,  850437,  612458,  602309,  674527,  360861,
        922886,  825167,  681125,   21502,  244725,  740652,  616320,
        214976,  712289,  527012,  693933,  396606,  145480,  157757,
        148978,   42652,  739641,  451597,  129692, 1018596,  242184,
        735121,  759720,  192119,  796176,  852293,  916458,  841637,
         26053,  144699,  144921,  253363, 1015288,  643824,  436011,
        603156,  414101,  461684,  878176,   26328,  202876,  661109,
        550323,  392183,  311559,  853282,  962403,  997231,  476428,
        881147,  390611,  486084,  550498,  637711,  808575,  286769,
        833198,  997623,   66902,  750991,  367923,  208119,  319100,
        693517,  916314,  227863,  928558,  459528,  362998,   38761,
        561789,  244803,  567904,  648486,  227161,  247195,   58979,
        677556,  472757,  292015,  124643,  414910,  368636,  659711,
        714925,  247430,  838257,  348308,  811410,  349798,  605602,
        256824, 1003063,  820664,  585896,  339024,  220057,  656535,
        527964,  415678,  510973,   26490,  461214,   38131,  129045,
        819867,   76089,  439486,  744369,   32112,  685466,  813375,
        969319,  689338,  997698,  876435,  437653,  247797,  533876,
        588179,  914882,  640978,   33036,  630872,  808970,  954997,
        725938,  958614,  100225,  393741,  863565,  948377,   49325,
         43907,  536521,  583828,  989226,  244351, 1006605,  956587,
        444341,  954424,  573378,  854758,   23042,  495862,  873014,
        917997,   67701,   37493,  504414,  646045,  158821,  763186,
        162419,  175181,  897934,   47976,  290081,  847985,  201058,
        870815,  761875, 1018532,  698121,  465022,  901510,  262605,
        406782,  210875,  820590,  528114,  800656,  995516,   22557,
         78509,  131985,  553380,  810952,  398969,  528309,  890326,
        902485,  919578,  373960,  679201,  993604,  347703,  182206,
        943724,  868972,  290390,  866858,  791237,  929659,  194319,
         43472,  606431,  775072,  233948,  800312,  997850,  865642,
        206335,  425782,  506918,  517139,  846462,  875022,  645922,
         39400,  225338,   57923,  297253,  836237,  170243,  477078,
        260165,  360099,  810448,  693494,  128390,  582622,  824964,
        212521, 1023475,  240013,  518813,  559763,  932909,  958994,
        532161,   19402,  569444,  619954,  522649,  997729,   32541,
        605168,  872538,  765410,  530472,  714691,  558926,  782128,
         33147,  695145,  995110,  764941,  771680,  129888,  971556,
        500494,  137242,  363723,  291536,  449366,  812710,  522004,
        665391,   96521,  977118,  801155,  554952,  403226,  905068,
        876438,    2543,  764757,  430420,  761601,  529417,  534071,
        481797,  549449,  410538,  809502,  421963,  774206,  158774,
        956078,  605188,  166088,  822717,  852995,  494949,  763891,
        664600,  715450,  952547,  914804,  883382,  544766,  848199,
        850748,  243347,   60633,  443030,  956095,  706454,  291421,
        858534,  701779,  776033,   15310,  401768,  706383,  292037,
        165917,  213037,  523535,  657379,  369856,  880678,  805575,
        843556,   20847,  508091, 1029153,    5707,  395980,  895913,
        204115,   42262,   39491,  390368,  671879,  112368,  126041,
        857684,   80988,  643279,  709318,  422241,  895248,  923901,
        867759,  363098,  980522,  640715,  710804,  190704,  423075,
        137171,  543059,  923007,  324862,  550387,  565324,  181558,
        930483,  226277,  978661,  490010,  553564,  687559,  279771,
        347396,  908865,  417573,  576865,   12622,  559005,  846190,
        451931,  953784,  985866,  120438,  726630,  577112,  433566,
        428925,  420513, 1003653,  763035,  225480,  318006,  160985,
         61969,  106835,  536953,  227141,  521585,  464477,  638811,
          7731, 1005908,  889176,  757448,  845745,  540195,  798347,
        683283,  983944,  484398,  440303,  211615,  791440,  944206,
        943596,  624530,  110248,  710494,   80789,  706148,  258333,
        438263,  136794,  327756,  868245,  609212,  713757,  692311,
        161915,  771740,  722530,  901500,  545466,  642485,  209072,
       1009108,  881880,   63757,  308783,  253550,  908928,  679007,
        208392,  598542,  681348,  629687,  602414,  232740,  758340,
        104602,  603185,  240458,   36372,  957245,  280424,  152197,
        216554,  462249,   80262,  974878,  707131,  107906,  711827,
        917375,   16359,  962866,  283143,  459527,   11406,  668465,
        383633,  128321,  487048,  337342,  608018,  495831,  376200,
        293824, 1031299,   36729,  361146,  834592,  916147,  118486,
        848627,  536157,  604758,  422092,  689495,  571857,  370401,
        825207,  570301,  781400,  982315,  437216,  475952,  121696,
        804924,  689827,   82508,  356640,  633638,   33120,  470289,
        498772,  840311,  932117,  339859,  708615,  528176,  325821,
        651052,   40570,  425488,  390478,  341978,  453713,  341250,
        568855,  673620,  802137,   73246,  100845,  845819,   67962,
        462942,  714415,  684836,  306448,  270448,  973923,  463154,
        902702,  736418,  674549,  484260,  156126,  387009,  237114,
        112639,  820918,  783241,   36340,  149972,  766008,  421962,
        254504,  530317,   98142,  640917,  933408,  706136,   61474,
        341678,  519101,  762418,  640961,  619897,  851020,  744208,
        968733,  332449,  145711,  713646,  468467,  702990,  351527,
        585742,   27034,  624212,  722805,  657461,   26392, 1023064,
        824045,  819980,  371471,  130273,  788926,  548649,  749095,
         32586,  751937,  426187,  673593,  256337,  205334,  386898,
         55802,  287690,  699601,   69508,   87208,  627752,  257745,
        709468,  588245,  149464,  674718,   99567,  614848,  246822,
        211495,  981960,  923886,  104815,  247166,  226980,  650215,
        332261,  232189,  708302,  381031,  256507,  289398,  768486,
        430752,  352605,  251605,  981633,  705539,  368057,  797070,
        325266,  189712,  163520,  578302,   47780,  596235,  851439,
        456755,  519290,  273481,  778431,   64077,   44150,  479618,
         41411,  195129,  366022,  910726,  851750,  532608,   95469,
        878652,  721666,  350003,  820482,   51672,  836386,  375778,
       1026410,  463780,  885252,  927048,  303295,  115856,  190344,
       1026735,  518650,  638019,  922598,  539721,  940687,  153450,
        421625,  569061,  511647,  874627,  493326,  453982,  951788,
         73705,  769532,  981254,  162868,   27827,  939879,   45723,
        773336,   10936,   18257,  236639,  876574,  685106,   72332,
        828581,  331976,  583170,  128569,  333626,  226310,  451157,
        547331,  742531,  896134,  599597,  485467,  197452,  795525,
        375969,  642827,  320016,  303594,  814404,  634999,  448005,
         93612,  609876,  450153,  630327,  452042,  950452,  891320,
        707620,  410406,  670257,  416519, 1021731,  974527,  243514,
        249621,  550613,  813012,  570987,  882393,  891497,  673973,
        335421,  418083,  619857,  832773,  338148,  685832,  206781,
         78965,  945904,  367580,  706431,  231644,  663384,   58040,
        824911,  830219,  268873,    5319,  463762,   53561,  124440,
          7834,  338271, 1028428,  123840,  429500,   12012,  819342,
          9320,  583309,  208716,  504729,   37771,  998884,  787246,
        671299,  659292,  205877,  175268,   66156,  673245,   42175,
        722577,  209975,  417859,  595807,  973395,  148923,  337760,
        145222,  246066,   42137,  560012,  796138,  247921,  692862,
        412404,  802108,  360768,  549695,  207909,  744867,  292592,
        909945, 1008533, 1026919,   27707,  625494,  998966,  194881,
        337633,   80185,  774457,  413504,  310962,  921913,  104269,
        227991,  963072,  229615,  500151,  279597,  563825,  606162,
        759600,  225672,  695325,  531108,  109969, 1028466,   42095,
        309839,   52471,  239051,   87170,  655964,  837789,  411560,
        635691,  223142,  448031,  976069,  639011,  522403,  937083,
        662312,  867786,  444688,  323374,   11155,  119221,  307583,
        100306,  434891,  632512, 1018832,   95731,  259819,  361137,
        703145,  701906, 1025379,  521225,  357673,  690038,  704303,
        304652,  112347,  294701,  643036,  145060,  889741,  927343,
        168667,  957508,  350366,   53710,  696418,  618844,  529376,
        782019,  360267,  572497,  667933,  370670,  351349,  938712,
         81733,  146205,  224043,  255046,   45982,  993057,  778893,
        124636,  580721,  575082,  863127,  999354,  860224,   31714,
        385446,  216695,  932505,  954256,  821946,  363217,  959355,
        959370,  916013,  185277,  360352,  746046,     918,  333684,
        999136,  491055,  694503,  850549,  465761,  747350,  564729,
        399336,  203719,  105706,  614253,  674711,   83255,   76448,
        461321,  722998,  893143,  928517,  383591,   83557,  510558,
        515762, 1007405,  682358,  671728,  747383,  778266,  211480,
        242566,  352686,   55321,  420852,  507950,  627246,  761893,
        409934,  305376,  394110,  573189,  364310,  776123,  797128,
        335846,  304004,  566554,  457012,  317971,   33682,  476802,
        886436,  971483,  919991,  897768,  536571,  101372,  191615,
        858080,  140760,  574250,  270825,  896625,  811115,  667698,
        655363,  839825,  862415,  183763,  198956,   79814,  226440,
        967393,  341471,  198838, 1019854,   97260,  120168,  508910,
        778677,  619557,   66170,   92463,  552599,  898301,  780339,
        796437,  210390,  266296,  499862,  805665,   52329,  728404,
        247591,    8190,  221493,  489970,  847190,  971234,   77974,
        935259,  399248,  611578, 1009029,  873085,  381977,  895127,
        886847,  840589,  568047,  855657,  792405,  859115,  304184,
        685552,  269285,  688541,  327537,  589817,  275738,  969086,
        913090,   69745, 1009863,  569975,   59491,   65600,  482833,
        119399,  956871,  688548,  257244,  714118, 1004742,    1907,
        946107,  581552,  893766, 1022710,  888769,  400227,  568939,
        360586,  238047,  483018,  317943,  988204,  243745,  299670,
        320602,  713183,  343686,  556402,  107229,  268844,  363378,
        371195,  390644,  554015,  621183,  660626,  219639,  132925,
        652782,  669281,  260454,  583867,  471677,  129255,  350955,
        561361,  447728,  599143,  779332,  630715,  296155,  677382,
       1019419,  653604, 1013395,  150526,  393804,  372942,  230982,
        660729,  878554,  725868,  670625,  862281,  723428,  185874,
        952856,  956889,  319210,  568564,  630324,  901419,   48038,
        796724,  123585,  675012,  627322,  725855,  477470,  336782,
        598981,   28409,  748595,  526294,  929247,  250212,   73761,
        368863,  148709,  915865,  310267,  302291,  733882,  751091,
        809582,  974668,  827198,  891832,  818123,  581401,  530810,
        543510,  304718,   87250,  882951,  510315,  480616,  639620,
        614262,  139488,  266254,  738317,  876092, 1009261,  501482,
         50896,  274228,  885641,  679517,  996245,  675256,  590571,
        174142,  810898, 1000671,  379466,  840333,  135691,  713514,
        724070,  640284,  454319,  919339,  987180,  191078,  378382,
        292230,   99276,  613086,  803658,  512931,  751506,  581246,
        289010,  312960,  613784,  810580])

# COMMAND ----------

#val_indices = np.random.choice(val_test_split - train_val_split - 720 - 10000 - 3600, size=200) + 720 + train_val_split

val_indices = np.array([1146254, 1379567, 1971275, 2002665, 2069894, 1445854, 1078734,
       1823549, 1824140, 1885016, 1719299, 1106898, 1701482, 1130290,
       1241829, 1669656, 1698256, 1522784, 1408392, 1378478, 1966299,
       1747342, 1828305, 1926978, 1790418, 1878089, 1442943, 1631137,
       1233724, 1897803, 1788453, 1483559, 1720591, 1377878, 1823238,
       1809236, 1973698, 1964341, 2051367, 1230396, 1365331, 1360487,
       1702383, 1655855, 1927992, 1296296, 1822380, 1097425, 1368223,
       2031780, 1546926, 1178452, 1400206, 1357370, 1203091, 1933601,
       1812339, 1429997, 2020041, 1204224, 1052218, 1379335, 1402967,
       1273615, 1609821, 1053471, 1118220, 1076470, 1538726, 1239260,
       1308687, 1666210, 1475547, 1925462, 1780895, 1336480, 1881610,
       1633839, 1768112, 1899112, 2032156, 1146706, 2040787, 1144723,
       1369378, 1355181, 1577518, 1632723, 1228746, 1826942, 1166431,
       1271269, 2066891, 1685056, 1625611, 1607579, 1108938, 1116967,
       1272742, 1884323, 2013910, 1047895, 1281528, 1676182, 2044529,
       2026352, 1562754, 1928797, 1881702, 1080323, 1708795, 1653097,
       1494941, 1228262, 1636863, 1820633, 1444785, 1761690, 1456235,
       1395076, 2028074, 1351939, 1467680, 1123138, 1604439, 1347990,
       1579826, 1266307, 1063305, 1139005, 1508251, 2035708, 1909640,
       1189918, 1091001, 1387718, 1763571, 1802959, 1369135, 1214255,
       1195469, 1090161, 2041276, 1637701, 1094884, 1940201, 1559187,
       1355350, 1501111, 1311824, 1519684, 1840834, 1647281, 1591465,
       2066622, 1805878, 1649447, 1456018, 1917903, 1898345, 1330756,
       2056893, 2074557, 1591769, 1145742, 1537105, 2044383, 1885988,
       1315665, 1547925, 1306822, 1268950, 1085656, 1243098, 1376527,
       1358142, 1342474, 1272370, 1742423, 1106050, 1618277, 1460259,
       1968746, 1504330, 1877336, 2026292, 1903663, 2023409, 1094345,
       1773727, 1307490, 2048080, 1291552, 1090756, 1814149, 1196740,
       1160743, 1502159, 1233321, 1122577])

# COMMAND ----------

#test_indices = np.random.choice(end_index - val_test_split - 720 - 10000 - 3600, size=200) + 720 + val_test_split

test_indices = np.array([3027316, 2334990, 2343952, 2531222, 2642551, 2455445, 2540288,
       2418964, 2908083, 2324567, 2365107, 2693067, 2452108, 2812612,
       2654160, 2272821, 2565563, 2602219, 2672887, 2680731, 2705033,
       3011441, 2179197, 3082212, 2207969, 2107950, 2681311, 2930477,
       2500341, 3103519, 2992850, 2767848, 2825504, 2808037, 2903728,
       2474359, 2158040, 2373103, 2668731, 2946940, 3078952, 2402028,
       3038423, 2543748, 2473082, 2443559, 2435645, 2934200, 2845760,
       2834535, 2349958, 2992726, 2587784, 2810416, 3023987, 2805794,
       2646906, 2476702, 2137084, 2374562, 2693730, 2739595, 2945000,
       2391175, 2292392, 2523581, 2909299, 2666928, 2294781, 2952072,
       2544806, 2198945, 2982459, 2793831, 2621202, 3075141, 2577214,
       2865191, 2365113, 2823218, 3041785, 2987991, 3043039, 2505499,
       2398085, 2996885, 2339096, 3050015, 2458409, 2523561, 2710663,
       2541015, 2893789, 3013537, 2188199, 3056865, 2555878, 2254662,
       2746503, 2370839, 2411755, 2227082, 2147540, 2459327, 2549361,
       3075453, 2395873, 2439229, 2786030, 2992277, 2278667, 2445066,
       2977001, 2123737, 3075084, 2724718, 2725213, 2174865, 2911222,
       2130426, 2517643, 2802015, 2974242, 2603985, 2415499, 2321129,
       2632045, 2896210, 2248916, 2340695, 2908155, 3085516, 2944389,
       2482815, 2474414, 2522130, 2189327, 2444506, 2275035, 2874855,
       2560276, 2321963, 2698335, 3116839, 3007160, 2693745, 2198821,
       2702484, 2521658, 3095304, 2351187, 2595203, 2094980, 3055560,
       2390785, 2737879, 2119305, 2607526, 2261433, 2608494, 2617134,
       2401195, 2097390, 2318165, 2227206, 2267788, 3026930, 2726204,
       2957697, 2489983, 2697830, 3092681, 2623763, 2207648, 2771904,
       2712315, 2495370, 2513065, 2234946, 2842407, 2945025, 2272919,
       2317533, 2432316, 2827582, 2990782, 2648633, 3028857, 2546233,
       2777596, 2134248, 2469733, 2185916, 2417099, 2285042, 2260649,
       2191970, 2975921, 2977804, 2945715])

# COMMAND ----------

station_constants = np.array([[5.92999983e+00, 1.00000000e+00, 3.36399994e+02, 3.37720001e+02,
        3.51999998e+00],
       [1.42089996e+02, 1.20000000e+01, 2.85700012e+02, 2.87200012e+02,
        3.51999998e+00],
       [2.46700001e+01, 3.33333343e-01, 2.51000000e+02, 2.52899994e+02,
        5.11000013e+00],
       [7.87699966e+01, 1.00000000e+00, 2.25000000e+02, 2.26500000e+02,
        3.16000009e+00],
       [5.75800018e+01, 1.00000000e+00, 1.87350006e+02, 1.89000000e+02,
        1.90999997e+00],
       [1.82900009e+01, 3.33333343e-01, 1.25000000e+02, 1.28100006e+02,
        7.21999979e+00],
       [1.05239998e+02, 2.50000000e+00, 1.10000000e+02, 1.11000000e+02,
        2.17000008e+00],
       [8.48899994e+01, 1.50000000e+00, 5.15000000e+01, 5.29000015e+01,
        3.78999996e+00]])

stations = np.array(['ARA', 'OHK', 'ATI', 'WKM', 'MTI', 'WPA', 'ARI', 'KPO'])
fill_factors = station_constants[:, 0]
travel_times = (station_constants[:, 1] * 60).astype(int)
min_hwl = station_constants[:, 2]
max_hwl = station_constants[:, 3]
k_factors = station_constants[:, 4]

# COMMAND ----------

# a+b*Q^c+max[d+e*DSWL+(f+g*DSWL)*ln(Q+h),0.0]
def get_station_twls(mws, spills, hwls):
  flows = mws * k_factors + spills

  type_zero_component = twl_constants[:, 1] + twl_constants[:, 2] * np.power(flows, twl_constants[:, 3])
  type_one_component = (twl_constants[:-1, 4] + twl_constants[:-1, 5] * hwls[..., 1:]) + (twl_constants[:-1, 6] + twl_constants[:-1, 7] * hwls[..., 1:]) * np.log(flows[:, :, :-1] + twl_constants[:-1, 8] + 1e-6)

  twls = type_zero_component + twl_constants[:, 0] * np.maximum(np.concatenate([type_one_component, np.zeros((mws.shape[0], mws.shape[1], 1))], axis=-1), 0)

  TWL_limit_thresholds = np.array([111, 125, 145, 162, 166, 171, 175, 181, 999])
  TWL_values = np.array([54.5, 54.7, 54.85, 55.1, 55.35, 55.6, 55.95, 56.3, 56.75])

  ari_twl = TWL_values[np.argmax(TWL_limit_thresholds[np.newaxis, np.newaxis, :] >= mws[:, :, -2, np.newaxis])]

  #TODO fix MTI TWL. Can be up to a metre out. Model MTI 1 and MTI 2 dynamics correctly

  twls[:, :, -2] = ari_twl

  return twls

# COMMAND ----------

action_pool_10 = np.array([[ 0.        ,  1.        ,  0.        ,  0.        ,  0.        ,  0.        ,  0.        ,  0.        ],
                          [ 1.        , -0.        , -0.        , -0.        , -0.        ,  -0.        , -0.        , -0.        ],
                          [-0.        , -0.        , -0.        ,  1.        , -0.        ,  -0.        , -0.        , -0.        ],
                          [ 0.        ,  0.57377046,  0.37704918,  0.04918033,  0.        ,  0.        ,  0.        ,  0.        ],
                          [-0.        , -0.        , -0.        , -0.        ,  1.        ,  -0.        , -0.        , -0.        ],
                          [-0.        , -0.        , -0.        , -0.        , -0.        ,  -0.        ,  1.        , -0.        ],
                          [-0.        , -0.        , -0.        , -0.        , -0.        ,  1.        , -0.        , -0.        ],
                          [-0.        , -0.        , -0.        , -0.        , -0.        ,  -0.        , -0.        ,  1.        ],
                          [-0.        , -0.        ,  0.06521739,  0.06521739,  0.54347825,  0.10869565,  0.2173913 , -0.        ],
                          [-0.        , -0.        ,  1.        , -0.        , -0.        ,  -0.        , -0.        , -0.        ]], dtype=np.float32)

action_pool_20 = np.array([[ 1.        ,  0.        ,  0.        ,  0.        ,  0.        ,  0.        ,  0.        ,  0.        ],
                        [ 0.        ,  1.        ,  0.        ,  0.        ,  0.        ,  0.        ,  0.        ,  0.        ],
                        [ 0.        ,  0.        ,  1.        ,  0.        ,  0.        ,  0.        ,  0.        ,  0.        ],
                        [-0.        , -0.        , -0.        ,  1.        , -0.        ,  -0.        , -0.        , -0.        ],
                        [-0.        , -0.        , -0.        , -0.        ,  1.        ,  -0.        , -0.        , -0.        ],
                        [-0.        , -0.        , -0.        , -0.        , -0.        ,  1.        , -0.        , -0.        ],
                        [-0.        , -0.        , -0.        , -0.        , -0.        ,  -0.        ,  1.        , -0.        ],
                        [-0.        , -0.        , -0.        , -0.        , -0.        ,  -0.        , -0.        ,  1.        ],
                        [ 0.        ,  0.57128906,  0.4284668 ,  0.        ,  0.        ,  0.        ,  0.        ,  0.        ],
                        [-0.        , -0.        ,  0.55175781,  0.10345459, -0.        ,  0.13793945,  0.20690918, -0.        ],
                        [-0.        , -0.        ,  0.4284668 , -0.        ,  0.57128906,  -0.        , -0.        , -0.        ],
                        [ 0.        ,  0.        ,  0.        ,  0.        ,  0.5       ,  0.5       ,  0.        ,  0.        ],
                        [ 0.        ,  0.        ,  0.        ,  0.        ,  0.76904297,  0.23071289,  0.        ,  0.        ],
                        [ 0.        ,  0.        ,  0.        ,  0.45996094,  0.5       ,  0.04000854,  0.        ,  0.        ],
                        [-0.        ,  0.41674805,  0.0333252 , -0.        ,  0.54980469,  -0.        , -0.        , -0.        ],
                        [-0.        ,  0.27270508, -0.        , -0.        ,  0.72705078,  -0.        , -0.        , -0.        ],
                        [-0.        , -0.        , -0.        , -0.        ,  0.625     ,  -0.        ,  0.375     , -0.        ],
                        [ 0.07141113, -0.        , -0.        ,  0.1071167 ,  0.82128906,  -0.        , -0.        , -0.        ],
                        [ 0.        ,  0.56152344,  0.03509521,  0.        ,  0.33325195,  0.        ,  0.07019043,  0.        ],
                        [-0.        , -0.        ,  0.05813599,  0.05813599,  0.22094727,  0.11627197,  0.54638672, -0.        ]])

action_pool_50 = np.array([[-0.        , -0.        ,  0.3529412 , -0.        ,  0.64705884,
        -0.        , -0.        , -0.        ],
       [-0.        ,  0.04545455, -0.        , -0.        ,  0.54545456,
         0.27272728,  0.13636364, -0.        ],
       [ 0.        ,  0.54545456,  0.        ,  0.        ,  0.45454547,
         0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.14814815,  0.07407407,  0.        ,  0.27160493,
         0.09876543,  0.4074074 ,  0.        ],
       [ 0.        ,  0.        ,  0.        ,  0.        ,  0.5       ,
         0.5       ,  0.        ,  0.        ],
       [-0.        , -0.        , -0.        ,  1.        , -0.        ,
        -0.        , -0.        , -0.        ],
       [ 0.        ,  0.2972973 ,  0.27027026,  0.        ,  0.43243244,
         0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.32142857,  0.14285715,  0.        ,  0.2857143 ,
         0.        ,  0.25      ,  0.        ],
       [-0.        , -0.        , -0.        ,  0.10344828, -0.        ,
         0.3448276 , -0.        ,  0.55172414],
       [-0.        , -0.        , -0.        , -0.        ,  1.        ,
        -0.        , -0.        , -0.        ],
       [-0.        ,  0.1754386 ,  0.19298245, -0.        ,  0.3508772 ,
        -0.        ,  0.21052632,  0.07017544],
       [ 0.        ,  0.        ,  0.        ,  0.45652175,  0.54347825,
         0.        ,  0.        ,  0.        ],
       [-0.        , -0.        ,  0.03030303,  0.6060606 , -0.        ,
        -0.        ,  0.36363637, -0.        ],
       [ 0.516129  , -0.        ,  0.16129032, -0.        ,  0.2580645 ,
         0.06451613, -0.        , -0.        ],
       [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
         0.30769232,  0.6923077 ,  0.        ],
       [-0.        , -0.        , -0.        , -0.        , -0.        ,
        -0.        , -0.        ,  1.        ],
       [ 0.        ,  0.23529412,  0.        ,  0.        ,  0.5882353 ,
         0.        ,  0.1764706 ,  0.        ],
       [ 0.        ,  0.34375   ,  0.03125   ,  0.        ,  0.        ,
         0.        ,  0.625     ,  0.        ],
       [-0.        , -0.        , -0.        , -0.        ,  0.36666667,
        -0.        ,  0.6333333 , -0.        ],
       [ 0.        ,  0.59090906,  0.4090909 ,  0.        ,  0.        ,
         0.        ,  0.        ,  0.        ],
       [-0.        ,  0.75      ,  0.25      , -0.        , -0.        ,
        -0.        , -0.        , -0.        ],
       [ 0.        ,  0.47058824,  0.29411766,  0.        ,  0.23529412,
         0.        ,  0.        ,  0.        ],
       [-0.        , -0.        , -0.        , -0.        , -0.        ,
         1.        , -0.        , -0.        ],
       [-0.        , -0.        , -0.        , -0.        , -0.        ,
        -0.        ,  1.        , -0.        ],
       [-0.        , -0.        ,  1.        , -0.        , -0.        ,
        -0.        , -0.        , -0.        ],
       [ 0.        ,  0.57894737,  0.        ,  0.        ,  0.        ,
         0.        ,  0.42105263,  0.        ],
       [-0.        , -0.        , -0.        , -0.        ,  0.72727275,
        -0.        , -0.        ,  0.27272728],
       [ 0.        ,  0.        ,  0.        ,  0.04054054,  0.8108108 ,
         0.14864865,  0.        ,  0.        ],
       [ 0.        ,  0.3043478 ,  0.        ,  0.        ,  0.6956522 ,
         0.        ,  0.        ,  0.        ],
       [-0.        , -0.        ,  0.46153846, -0.        , -0.        ,
        -0.        ,  0.53846157, -0.        ],
       [-0.        ,  0.27272728, -0.        , -0.        ,  0.5090909 ,
         0.03636364, -0.        ,  0.18181819],
       [ 0.        ,  6.        ,  0.        ,  0.        , -5.        ,
         0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.625     ,  0.        ,  0.375     ,
         0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.33333334,  0.        ,  0.3030303 ,
         0.        ,  0.36363637,  0.        ],
       [ 0.        ,  0.10526316,  0.23684211,  0.        ,  0.42105263,
         0.        ,  0.23684211,  0.        ],
       [ 1.        , -0.        , -0.        , -0.        , -0.        ,
        -0.        , -0.        , -0.        ],
       [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
         0.        ,  0.61538464,  0.3846154 ],
       [ 0.        ,  0.10526316,  0.23684211,  0.        ,  0.42105263,
         0.        ,  0.23684211,  0.        ],
       [-0.        ,  0.3125    ,  0.3125    ,  0.09375   , -0.        ,
        -0.        ,  0.28125   , -0.        ],
       [ 0.        ,  0.4509804 ,  0.09803922,  0.4509804 ,  0.        ,
         0.        ,  0.        ,  0.        ],
       [ 0.        ,  1.        ,  0.        ,  0.        ,  0.        ,
         0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.25210086,  0.        ,  0.        ,  0.44537815,
         0.        ,  0.30252102,  0.        ],
       [ 0.        ,  0.25714287,  0.        ,  0.        ,  0.4857143 ,
         0.        ,  0.25714287,  0.        ],
       [ 0.        ,  0.        ,  0.        ,  0.34375   ,  0.        ,
         0.        ,  0.65625   ,  0.        ],
       [ 0.        ,  0.25714287,  0.        ,  0.        ,  0.4857143 ,
         0.        ,  0.25714287,  0.        ],
       [-0.        ,  0.5714286 , -0.        , -0.        , -0.        ,
        -0.        , -0.        ,  0.42857143],
       [ 0.        ,  0.        ,  0.        ,  0.        ,  0.63076925,
         0.        ,  0.36923078,  0.        ],
       [ 0.        , -1.5       , -2.375     ,  0.        ,  6.875     ,
         0.        , -2.        ,  0.        ],
       [ 0.        ,  0.44117647,  0.5588235 ,  0.        ,  0.        ,
         0.        ,  0.        ,  0.        ],
       [-0.        , -0.        , -0.        , -0.        ,  0.44444445,
        -0.        , -0.        ,  0.5555556 ]], dtype=np.float32)

# COMMAND ----------

# spill_pool_20 = np.array([[  0.,   0.,   0.,   0.,   0.,   0.,  0.,   0.,   0.],
#                           [  -5.,   0.,   0.,   0.,   0.,   0.,  0.,   0.,   0.],
#                           [  5.,   0.,   0.,   0.,   0.,   0.,  0.,   0.,   0.],
#                           [  -100.,   0.,   0.,   0.,   0.,   0.,  0.,   0.,   0.],
#                           [  100.,   0.,   0.,   0.,   0.,   0.,  0.,   0.,   0.],
#        [  0.,   0.,   0.,   0.,   0.,   0.,  77.,   0.,   0.],
#        [  0.,   0.,   0.,   0.,  30.,   0.,   0.,   0.,   0.],
#        [  0.,   0.,   0.,  26.,  34.,   0.,   0.,   0.,   0.],
#        [  0.,   0.,   0.,   0.,   0.,   0.,   0., -20., -41.],
#        [  0.,   0.,   0.,   0.,   0., -58.,   0.,   0.,   0.],
#        [  0.,   0.,   0.,   0., -11.,   0.,   0.,   0.,   0.],
#        [  0.,   0.,   0.,   0., -80.,   0.,   0.,   0.,   0.],
#        [  0.,   0.,  10.,  27.,   0.,   0.,   0.,   0.,   0.],
#        [  0.,   0.,   0.,   0.,   0.,   0., -68.,   0.,   0.],
#        [  0.,   0.,  71.,  16.,   0.,   0.,   0.,   0.,   0.],
#        [ 44.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
#        [  0.,   0., -64., -20.,   0.,   0.,   0.,   0.,   0.],
#        [  0., -62.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
#        [  0.,  63.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
#        [  0.,   0., -10., -49.,   0.,   0.,   0.,   0.,   0.],
#        [  0.,   0.,   0.,  10.,   0.,  44.,   0.,   0.,   0.],
#        [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,  34.],
#        [  0.,   0.,   0.,   0.,   0.,   0.,   0.,  40.,   0.],
#        [  0.,   0.,   0.,  10.,  60.,   0.,   0.,   0.,   0.],
#        [-42.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.]],
#       dtype=np.float32)

spill_pool_3 = np.array([[  0.,   0.,   0.,   0.,   0.,   0.,  0.,   0.,   0.],
                          [  -60.,   -60.,-60.,-60.,-60.,-60.,-60.,-60,-60],
                          [  60.,  60., 60., 60., 60., 60., 60., 60, 60]])

spill_pool_20 = np.array([[  0.,   0.,   0.,   0.,   0.,   0.,  0.,   0.,   0.],
                          [  -5.,   0.,   0.,   0.,   0.,   0.,  0.,   0.,   0.],
                          [  5.,   0.,   0.,   0.,   0.,   0.,  0.,   0.,   0.],
                          [  -100.,   0.,   0.,   0.,   0.,   0.,  0.,   0.,   0.],
                          [  100.,   0.,   0.,   0.,   0.,   0.,  0.,   0.,   0.],
       [  0.,   0.,   0.,   0.,   0.,   0.,  70.,   0.,   0.],
       [  0.,   0.,   0.,   0.,   0.,   0.,   0., -30.,   0.],
       [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0., -40.],
       [  0.,   0.,   0.,   0.,   0., -50.,   0.,   0.,   0.],
       [  0.,   0.,   0.,   0., -60.,   0.,   0.,   0.,   0.],
       [  0.,   0.,   0.,  30.,   0.,   0.,   0.,   0.,   0.],
       [  0.,   0.,   0.,   0.,   0.,   0., -70.,   0.,   0.],
       [  0.,   0.,  60.,   0.,   0.,   0.,   0.,   0.,   0.],
       [ 40.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
       [  0.,   0., -60.,   0.,   0.,   0.,   0.,   0.,   0.],
       [  0., -60.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
       [  0.,  60.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
       [  0.,   0.,   0., -30.,   0.,   0.,   0.,   0.,   0.],
       [  0.,   0.,   0.,   0.,   0.,  50.,   0.,   0.,   0.],
       [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,  40.],
       [  0.,   0.,   0.,   0.,   0.,   0.,   0.,  30.,   0.],
       [  0.,   0.,   0.,   0.,  60.,   0.,   0.,   0.,   0.],
       [-40.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.]],
      dtype=np.float32)


      

# spill_pool_80 = np.array([[  0.,   0.,   0.,   0.,   0.,   0.,  0.,   0.,   0.],
#        [   0.,    0.,    0.,    0.,   20.,    0.,    0.,    0.,    0.],
#        [   0.,    0.,    0.,   25.,   16.,    0.,    0.,    0.,    0.],
#        [ -37.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.],
#        [   0.,    0.,    0.,    0.,  -87.,    0.,    0.,    0.,    0.],
#        [   0.,    0.,   52.,   25.,    0.,    0.,    0.,    0.,    0.],
#        [   0.,    0.,    0.,   25.,   55.,    0.,    0.,    0.,    0.],
#        [ -21.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.],
#        [ -96.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.],
#        [   0.,    0.,    0.,    0.,    0.,    0.,  -28.,    0.,    0.],
#        [  24.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.],
#        [   0.,    0.,    0.,    0.,    0.,    0.,  -55.,    0.,    0.],
#        [   0.,    0.,    0.,    0.,    0.,    0.,  -94.,    0.,    0.],
#        [   0.,    0.,    0.,    0., -141.,    0.,    0.,    0.,    0.],
#        [   0.,    0.,   75.,    0.,    0.,    0.,    0.,    0.,    0.],
#        [   0.,    0.,    0.,    0.,  -45.,    0.,    0.,    0.,    0.],
#        [   0.,    0.,    0.,    0.,    0.,    0.,  110.,    0.,    0.],
#        [   0.,    0.,    0.,    0.,    0.,    0.,   74.,    0.,    0.],
#        [   0.,    0.,    0.,    0.,    0.,    0.,   46.,    0.,    0.],
#        [   0.,    0.,   97.,   20.,    0.,    0.,    0.,    0.,    0.],
#        [   0.,    0.,    0.,    0.,    0.,    0.,   24.,    0.,    0.],
#        [   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,  -99.],
#        [   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,  -55.],
#        [   0.,    0.,    0.,    0.,    0.,    0.,   26.,   35.,    0.],
#        [   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,  -28.],
#        [   0.,    0.,    0.,    0.,    0.,   20.,    0.,    0.,    0.],
#        [   0.,    0.,    0.,    0.,    0.,    0., -145.,    0.,    0.],
#        [   0.,    0.,    0.,    0.,    0.,    0.,    0.,  -96.,    0.],
#        [  47.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.],
#        [   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,   11.],
#        [   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,   25.],
#        [   0.,    0.,    0.,    0.,    0.,   37.,    0.,    0.,    0.],
#        [   0.,    0.,    0.,    0.,    0.,   62.,    0.,    0.,    0.],
#        [   0.,  -46.,    0.,    0.,    0.,    0.,    0.,    0.,    0.],
#        [   0.,  -26.,    0.,    0.,    0.,    0.,    0.,    0.,    0.],
#        [   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,   39.],
#        [   0.,  -16.,    0.,    0.,    0.,    0.,    0.,    0.,    0.],
#        [   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,   70.],
#        [   0.,    0.,   41.,    0.,    0.,    0.,    0.,    0.,    0.],
#        [   0.,    0.,    0.,  -23.,    0.,    0.,    0.,    0.,    0.],
#        [   0.,    0.,    0.,   45.,    0.,    0.,    0.,    0.,    0.],
#        [   0.,    0.,    0.,    0.,    0.,    0.,    0.,   21.,    0.],
#        [   0.,    0.,    0.,  -46.,    0.,    0.,    0.,    0.,    0.],
#        [   0.,    0.,   24.,   24.,    0.,    0.,    0.,    0.,    0.],
#        [   0.,    0.,    0.,  123.,    0.,    0.,    0.,    0.,    0.],
#        [   0.,    0.,    0.,  -72.,    0.,    0.,    0.,    0.,    0.],
#        [   0.,    0.,    0.,   24.,   33.,    0.,    0.,    0.,    0.],
#        [   0.,    0.,    0.,    0.,    0.,    0.,    0.,   43.,    0.],
#        [   0.,    0.,    0.,    0.,   93.,    0.,    0.,    0.,    0.],
#        [   0.,    0.,    0.,    0.,    0.,    0.,    0.,  -52.,    0.],
#        [ -62.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.],
#        [   0.,   46.,    0.,    0.,    0.,    0.,    0.,    0.,    0.],
#        [   0.,    0.,    0.,    0.,    0.,  -44.,  -46.,    0.,    0.],
#        [   0.,    0.,    0.,    0.,    0.,  -24.,    0.,    0.,    0.],
#        [   0.,    0.,    0.,    0.,   55.,    0.,    0.,    0.,    0.],
#        [   0.,   22.,    0.,    0.,    0.,    0.,    0.,    0.,   27.],
#        [   0.,    0.,    0.,    0.,    0.,  -50.,    0.,    0.,    0.],
#        [   0.,    0.,    0.,    0.,    0.,  -82.,    0.,    0.,    0.],
#        [   0.,    0.,    0.,    0.,   37.,    0.,    0.,    0.,    0.],
#        [   0.,    0.,    0.,    0.,    0., -119.,    0.,    0.,    0.],
#        [   0.,   26.,    0.,    0.,    0.,    0.,    0.,    0.,    0.],
#        [   0.,   16.,    0.,    0.,    0.,    0.,    0.,    0.,    0.],
#        [   0.,    0.,    0.,    0.,    0.,    0.,    0.,   69.,    0.],
#        [   0.,    0.,    0.,    0.,   57.,    0.,    0.,   30.,    0.],
#        [   0.,    0.,    0.,   24.,    0.,   28.,    0.,    0.,    0.],
#        [   0.,    0.,    0.,    0.,    0.,    0.,    0.,   33.,   30.],
#        [   0.,    0.,    0.,   22.,    0.,    0.,    0.,    0.,    0.],
#        [   0.,    0.,  -50.,  -43.,    0.,    0.,    0.,    0.,    0.],
#        [  80.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.],
#        [   0.,    0.,    0.,    0.,    0.,    0.,    0.,  -24.,    0.],
#        [   0.,    0.,  -40.,  -10.,    0.,    0.,    0.,    0.,    0.],
#        [   0.,    0.,    0.,    0.,   44.,    0.,   51.,    0.,    0.],
#        [   0.,    0.,  -93.,    0.,    0.,    0.,    0.,    0.,    0.],
#        [   0.,    0.,  -99.,  -51.,    0.,    0.,    0.,    0.,    0.],
#        [   0.,  -69.,    0.,    0.,    0.,    0.,    0.,    0.,    0.],
#        [   0.,   69.,    0.,    0.,    0.,    0.,    0.,    0.,    0.],
#        [   0.,    0.,    0., -137.,    0.,    0.,    0.,    0.,    0.],
#        [   0.,    0.,    0.,  -33.,    0.,  -57.,    0.,    0.,    0.],
#        [   0.,    0.,    0.,   24.,    0.,   61.,    0.,    0.,    0.],
#        [  13.,    0.,    0.,    0.,    0.,    0.,    0.,   19.,    0.],
#        [   0.,    0.,    0.,   24.,    0.,    0.,    0.,   31.,    0.]],
#       dtype=np.float32)

tpo_set_15 = np.array([[  0.],
       [ 39.],
       [-33.],
       [ 13.],
       [-16.],
       [-64.],
       [ 23.],
       [ 44.],
       [-44.],
       [ -9.],
       [ 53.],
       [-27.],
       [  6.],
       [-22.],
       [ 33.]], dtype=np.float32)

tpo_set_6 = np.array([[  0.],
       [-42.],
       [ 26.],
       [-22.],
       [ 10.],
       [ 44.]], dtype=np.float32)

tpo_set_5 = np.array([[  0.],
       [-42.],
       [ 5.],
       [-5.],
       [ 44.]], dtype=np.float32)

tpo_set_3 = np.array([[  0.],
       [-42.],
       [ 44.]], dtype=np.float32)

spill_only_pool_50 = np.array([
       [   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.],
       [   0.,    0.,  -22.,    0.,   10.,   80.,    0.,    0.],
       [   0.,    0.,    0.,    0.,    0.,    0.,  -16.,    0.],
       [  66.,    0.,    0.,    0.,    0.,    0.,    0.,    0.],
       [ -66.,    0.,    0.,    0.,    0.,    0.,    0.,    0.],
       [   0.,  -90.,  -50.,    0.,    0.,    0.,    0.,    0.],
       [   0.,    0.,    0.,    0.,  -30.,  -30.,    0.,    0.],
       [   0.,    0.,    0.,   28.,    0.,    0.,    0.,    0.],
       [   0.,   82.,    0.,    0.,    0.,    0.,    0.,    0.],
       [   0.,    0.,    0.,  -51.,    0.,    0.,    0.,    0.],
       [   0.,    0.,    0.,    0.,    0.,  -86.,    0.,    0.],
       [   0.,    0.,    0.,    0.,    0.,    0.,    0.,  -75.],
       [   0.,    0.,    0.,    0.,   40.,    0.,    0.,    0.],
       [   0.,    0.,    0.,    0.,    0.,    0.,    0.,   24.],
       [  43.,    0.,    0.,    0.,    0.,    0.,    0.,    0.],
       [   0.,    0.,    0.,   51.,    0.,    0.,    0.,    0.],
       [   0.,    0.,    0.,    0.,  -22.,    0.,    0.,    0.],
       [   0.,    0.,  -23.,    0.,    0.,    0.,    0.,    0.],
       [   0.,  -49.,  -37.,    0.,    0.,    0.,    0.,    0.],
       [   0.,    0.,    0.,    0.,    0.,    0.,    0.,  -40.],
       [ -20.,    0.,    0.,    0.,    0.,    0.,    0.,    0.],
       [   0.,    0.,   24.,    0.,    0.,    0.,    0.,    0.],
       [   0.,    0.,    0.,    0.,    0.,    0.,   27.,    0.],
       [   0.,    0.,    0.,    0.,    0.,  -48.,    0.,    0.],
       [   0.,    0.,    0.,    0.,    0.,   49.,    0.,    0.],
       [   0.,  -23.,    0.,    0.,    0.,    0.,    0.,    0.],
       [   0.,    0.,    0.,  -28.,    0.,    0.,    0.,    0.],
       [  23.,    0.,    0.,    0.,    0.,    0.,    0.,    0.],
       [   0.,   83.,   22.,   56.,   24.,   54.,    0.,    0.],
       [   0., -102.,  -63.,  -76.,  -11.,    0.,    0.,    0.],
       [   0.,    0.,    0.,    0.,    0.,   97.,    0.,    0.],
       [   0.,    0.,    0.,  -95.,    0.,    0.,    0.,    0.],
       [   0.,    0.,    0.,    0.,    0.,   22.,    0.,    0.],
       [   0.,    0.,    0.,    0.,    0.,    0.,  -40.,    0.],
       [   0.,    0.,    0.,    0.,    0.,    0.,  -99.,    0.],
       [   0.,  -50.,    0.,    0.,    0.,    0.,    0.,    0.],
       [   0.,   49.,    0.,   49.,    0.,    0.,    0.,    0.],
       [   0.,   20.,    0.,    0.,    0.,    0.,    0.,    0.],
       [   0.,    0.,    0.,    0.,  -79.,    0.,    0.,    0.],
       [   0.,    0.,  -49.,    0.,    0.,    0.,    0.,    0.],
       [   0.,    0.,    0.,  -68.,  -67.,  -70.,    0.,    0.],
       [   0.,  -50.,  -29.,  -60.,    0.,    0.,    0.,    0.],
       [ -60.,    0.,    0.,    0.,    0.,    0.,    0.,    0.],
       [   0.,   49.,    0.,    0.,    0.,    0.,    0.,    0.],
       [   0.,  -90.,    0.,    0.,    0.,    0.,    0.,    0.],
       [   0.,    0.,    0.,   97.,   35.,    0.,    0.,    0.],
       [   0.,    0.,    0.,    0.,  -50.,    0.,    0.,    0.],
       [   0.,    0.,    0.,    0.,    0.,    0.,   61.,    0.],
       [   0.,    0.,    0.,    0.,   20.,    0.,    0.,    0.],
       [ -46.,    0.,    0.,    0.,    0.,    0.,    0.,    0.],
       [   0.,    0.,    0.,    0.,    0.,    0.,   11.,    0.]],
      dtype=np.float32)

spill_pool_150 = spill_pool_20 #np.concatenate([np.tile(tpo_set_5, (spill_only_pool_50.shape[0], 1)), np.repeat(spill_only_pool_50, tpo_set_5.shape[0], axis=0)], axis=1)

spill_pool_150.shape

# COMMAND ----------

unit_ranking_clusters_50 = np.array([[ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 16., 32., 26.,
        12.,  7.,  1., 17.,  3., 18.,  4.,  8.,  5., 33., 27.,  9.,  6.,
        13., 19.,  2., 34., 14., 20., 10., 21., 22., 23., 24., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 16., 26., 12.,
         7.,  3., 17.,  4.,  8., 32., 18., 27.,  5., 13., 19.,  9.,  1.,
        20.,  6., 14.,  2., 10., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 26.,  7., 16.,
        12.,  3., 17.,  4.,  8.,  5., 32.,  9., 18., 27., 13.,  1.,  2.,
         6., 10., 14., 19., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 15., 28., 25., 29., 30., 11., 31., 16., 32., 26.,
         7.,  3., 17., 12.,  4., 33.,  8., 18., 27., 13., 19., 20.,  5.,
         1.,  9.,  2.,  6., 10., 14., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 26., 16., 12.,
        17.,  7., 32.,  3.,  4., 33., 18.,  8., 27., 13.,  1., 19.,  9.,
         5., 34.,  6.,  2., 10., 14., 20., 21., 22., 23., 24., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 38., 32.,  1.,
        26.,  7., 16.,  3., 27., 17., 12.,  4., 18.,  8.,  5.,  9., 13.,
        19.,  2.,  6., 14., 20., 10., 33., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37.,  1.,  2., 15., 25., 26., 27., 28., 29., 30., 31.,
        32., 33., 34., 35., 38., 16.,  7.,  3.,  4., 11., 17., 12.,  8.,
        13.,  5., 14.,  9., 18.,  6., 19., 10., 20., 21., 22., 23., 24.],
       [ 0., 36., 37.,  7., 11., 15., 25., 28., 29., 30., 31.,  3., 32.,
        16.,  4.,  8., 26., 12., 17., 27., 18., 33.,  5., 13.,  9.,  6.,
         1., 19.,  2., 10., 14., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  1.,  2., 15., 28., 29., 30., 31., 38., 32., 33.,
        25., 11., 26.,  7.,  8.,  3., 12., 16., 27.,  4., 17.,  9.,  5.,
        13., 18., 19., 14.,  6., 20., 21., 34., 10., 22., 23., 24., 35.],
       [ 0., 36., 37., 11., 15., 25., 26., 28., 29., 16., 30., 31., 17.,
         7.,  3., 12.,  4.,  1.,  8.,  5., 18., 13.,  9.,  6., 27., 32.,
        14., 19.,  2., 10., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 15., 16., 25., 28., 29., 30., 31., 26.,  7., 32.,
         3., 11., 12., 17.,  4., 27., 18., 13., 33.,  8., 19.,  5.,  9.,
        14.,  1.,  2.,  6., 10., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  1., 15., 28., 29., 25., 26., 30.,  7., 11.,  3.,
        31., 12., 32.,  8., 16., 17.,  4., 13., 27., 33.,  5., 18.,  6.,
         9., 19.,  2., 20., 14., 10., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 26., 16.,  7.,
         3., 32., 12.,  4., 17.,  8.,  1.,  5., 27., 33.,  2.,  6.,  9.,
        10., 13., 14., 18., 19., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31.,  7., 26.,  3.,
        16., 12., 17.,  4.,  8., 32., 27., 33., 18., 19.,  5.,  1., 13.,
         9., 20.,  2.,  6., 10., 14., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 16.,  7., 26.,
         3., 12.,  4., 17., 32.,  8.,  5., 18.,  9., 13., 33.,  6., 27.,
        19., 10., 20.,  1.,  2., 14., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  1., 15., 25., 28., 29., 30., 31.,  7., 11.,  3.,
        32., 16., 26., 12.,  4., 13., 17.,  8.,  5., 18., 27.,  9.,  2.,
        33., 19.,  6., 14., 10., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 26.,  7., 16.,
         3., 12.,  4.,  1., 17.,  8.,  5., 27., 32., 18.,  2.,  6.,  9.,
        10., 13., 14., 19., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31.,  7., 26., 16.,
        32.,  3., 17., 12.,  4., 33.,  8.,  5., 18.,  1.,  2.,  6.,  9.,
        10., 13., 14., 19., 20., 21., 22., 23., 24., 27., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 16.,  1., 26.,
         7., 32., 17., 12.,  3.,  4., 18., 27.,  8.,  5., 13.,  9., 33.,
        19.,  6.,  2., 10., 14., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  7., 11., 15., 25., 28., 29., 30., 31.,  3., 12.,
        26., 16., 17.,  4.,  8.,  1.,  5., 18., 27., 32.,  9., 19., 13.,
         6., 33., 10.,  2., 14., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 16., 26., 12.,
         7., 17., 32.,  3.,  4.,  1.,  8.,  5., 18.,  9., 13., 27.,  6.,
        19., 33.,  2., 10., 14., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  1., 11., 15., 25., 28., 29., 30., 26., 31., 16.,
         7., 32., 17.,  3., 12.,  4.,  8.,  5., 38., 27., 13., 33., 18.,
         2.,  6.,  9., 10., 14., 19., 20., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37.,  1., 15., 25., 28., 29., 30., 31., 16., 11.,  7.,
         3., 26., 32., 12.,  4., 17.,  8., 13.,  5.,  6.,  9., 27., 18.,
        14., 33., 19.,  2., 10., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31.,  7., 26., 16.,
         3., 17., 12.,  4.,  8.,  5., 18., 27., 32., 19.,  1.,  2.,  6.,
         9., 10., 13., 14., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 16., 12., 26., 31.,
         7.,  3., 32.,  4., 17.,  8., 18.,  5., 13.,  9., 27.,  1., 33.,
        19.,  6.,  2., 10., 14., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  1.,  7., 15., 16., 25., 26., 27., 28., 29., 30.,
        31., 32., 33., 34., 38., 35., 11.,  2., 17.,  8.,  3., 12., 13.,
         4.,  9., 18.,  5., 19.,  6., 10., 20., 21., 14., 22., 23., 24.],
       [ 0., 36., 37., 11., 15., 25., 26., 28., 29., 30., 31., 32., 33.,
        38.,  1.,  2., 12., 13., 16., 14., 17.,  7., 27.,  3.,  4., 18.,
         8.,  5.,  9., 19.,  6., 10., 20., 21., 22., 23., 34., 35., 24.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31.,  7., 16., 26.,
        32.,  3., 17.,  4., 12.,  1.,  8., 18.,  5.,  9., 33., 19., 27.,
         2.,  6., 10., 13., 14., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31.,  7., 16., 26.,
        32.,  3., 17., 12.,  4.,  8., 27., 18.,  1.,  5.,  9., 13., 33.,
        19.,  2.,  6., 10., 14., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  1.,  2.,  3.,  4.,  7., 11., 15., 25., 26., 28.,
        29., 30., 31., 32., 33., 34., 38., 27., 16., 35., 17., 12.,  5.,
        18.,  8., 19.,  9.,  6., 13., 10., 20., 21., 22., 14., 23., 24.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 16.,  7., 26.,
        17.,  3., 12.,  1.,  4.,  8., 32., 18., 27.,  5., 33.,  2.,  6.,
         9., 10., 13., 14., 19., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  3.,  7., 15., 25., 28., 29., 16., 30., 11., 31.,
        12., 32., 26.,  1.,  4.,  8., 17., 33., 18., 27.,  5., 19.,  9.,
        13., 20.,  2.,  6., 10., 14., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  1., 11., 15., 28., 29., 30., 25., 31.,  7.,  3.,
        16., 26.,  4., 12., 17., 32.,  8., 18.,  5., 27., 13.,  2.,  6.,
         9., 10., 14., 19., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 26., 16., 31.,  7.,
         3.,  4.,  8., 17., 12.,  5., 18., 32.,  6., 27.,  1.,  2.,  9.,
        10., 13., 14., 19., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 16.,  7., 26.,
         3., 17., 12.,  4.,  1., 32.,  8.,  5.,  9., 18., 33.,  6., 13.,
        27., 19.,  2., 10., 14., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  1.,  2., 11., 12., 13., 15., 25., 28., 29., 30.,
        31., 38., 32., 33., 26., 34.,  7., 35., 27.,  3., 14.,  4.,  5.,
         8., 16.,  6.,  9., 17., 18., 19., 10., 20., 21., 22., 23., 24.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 11., 31., 16., 26.,  7.,
        12., 17.,  3.,  4.,  8.,  5., 13., 32., 18.,  9., 27.,  6., 14.,
        19.,  1.,  2., 10., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 15., 28., 25., 29., 30., 31., 11., 16., 12., 32.,
         7., 17., 26.,  3.,  4.,  8., 18., 27., 33.,  5.,  9.,  1., 13.,
         6., 19.,  2., 10., 14., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 31., 11.,  7., 32., 12.,
        26., 16.,  3.,  4., 17., 18.,  8.,  1., 13.,  5.,  9., 27.,  2.,
         6., 10., 14., 19., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 16.,  7.,  3.,
        26.,  4., 32., 12., 17.,  8., 27., 18.,  1.,  5.,  2.,  6.,  9.,
        10., 13., 14., 19., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37.,  1.,  2., 28., 29., 30., 31., 32., 11., 15., 25.,
        33.,  7., 26., 16., 12., 27., 17., 13.,  8., 18.,  3.,  9.,  4.,
         5., 14., 19.,  6., 38., 20., 21., 10., 22., 23., 24., 34., 35.],
       [ 0., 36., 37.,  1., 15., 25., 28., 29., 38., 30., 11., 31., 16.,
        32., 26., 33.,  7.,  3.,  4., 12.,  8., 27., 17., 13., 18.,  5.,
         9., 19., 20., 34.,  2.,  6., 14., 10., 21., 22., 23., 24., 35.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 31., 26., 11.,  7., 16.,
         3., 12.,  4., 17.,  8.,  5., 32.,  9., 18.,  1., 13., 27., 19.,
         6.,  2., 10., 14., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30.,  7., 31., 26.,  3.,
         4., 16., 12., 32., 17.,  8.,  5., 33., 18., 27., 19., 13.,  6.,
         1.,  2.,  9., 10., 14., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  7.,  3., 15., 11., 25., 28., 29., 30., 16., 31.,
        26., 12.,  4.,  8., 17., 13., 32.,  9., 27., 33.,  5., 18.,  1.,
         2.,  6., 10., 14., 19., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 16., 26., 17.,
        12., 32.,  7.,  3., 18.,  4., 33.,  8., 27.,  1.,  5.,  9., 19.,
        13.,  6., 34.,  2., 10., 14., 20., 21., 22., 23., 24., 35., 38.],
       [ 0., 36., 37.,  1., 25., 28., 29., 30., 31., 38., 15., 32., 33.,
         2., 11., 16., 26., 12.,  7., 27., 13.,  3.,  4.,  8., 17., 18.,
        19.,  5., 14.,  9., 20.,  6., 34., 10., 21., 22., 23., 24., 35.],
       [ 0., 36., 37.,  1., 15., 25., 28., 11., 29., 30., 26., 31., 16.,
         3.,  7., 17., 32., 12.,  4., 13.,  8., 18.,  5.,  9., 27.,  2.,
        33.,  6., 19., 10., 14., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 16., 26., 32.,
        12., 33., 13.,  7.,  3.,  4., 17.,  8., 18.,  9.,  1., 27.,  5.,
         6., 19., 38., 20., 10.,  2., 14., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 11., 15., 16., 25., 28., 29., 30., 26.,  7., 31.,
        12.,  3.,  4.,  8., 17., 32., 13., 27.,  5.,  9.,  1.,  2.,  6.,
        10., 14., 18., 19., 20., 21., 22., 23., 24., 33., 34., 35., 38.]])

unit_ranking_clusters_100 = np.array([[ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 16., 32., 26.,
        12.,  7.,  1., 17.,  3., 18.,  4.,  8.,  5., 33., 27.,  9.,  6.,
        13., 19.,  2., 34., 14., 20., 10., 21., 22., 23., 24., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 16., 26., 12.,
         7.,  3., 17.,  4.,  8., 32., 18., 27.,  5., 13., 19.,  9.,  1.,
        20.,  6., 14.,  2., 10., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 26.,  7., 16.,
        12.,  3., 17.,  4.,  8.,  5., 32.,  9., 18., 27., 13.,  1.,  2.,
         6., 10., 14., 19., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 15., 28., 25., 29., 30., 11., 31., 16., 32., 26.,
         7.,  3., 17., 12.,  4., 33.,  8., 18., 27., 13., 19., 20.,  5.,
         1.,  9.,  2.,  6., 10., 14., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 26., 16., 12.,
        17.,  7., 32.,  3.,  4., 33., 18.,  8., 27., 13.,  1., 19.,  9.,
         5., 34.,  6.,  2., 10., 14., 20., 21., 22., 23., 24., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 38., 32.,  1.,
        26.,  7., 16.,  3., 27., 17., 12.,  4., 18.,  8.,  5.,  9., 13.,
        19.,  2.,  6., 14., 20., 10., 33., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37.,  1., 11., 15., 25., 28., 29., 30., 31., 32., 26.,
        16., 38., 17.,  7., 27., 12., 18., 13.,  3.,  4., 19.,  8.,  9.,
        33.,  5., 14.,  6., 10., 20.,  2., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37.,  7., 11., 15., 25., 28., 29., 30., 31.,  3., 32.,
        16.,  4.,  8., 26., 12., 17., 27., 18., 33.,  5., 13.,  9.,  6.,
         1., 19.,  2., 10., 14., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  1.,  2., 15., 28., 29., 30., 31., 38., 32., 33.,
        25., 11., 26.,  7.,  8.,  3., 12., 16., 27.,  4., 17.,  9.,  5.,
        13., 18., 19., 14.,  6., 20., 21., 34., 10., 22., 23., 24., 35.],
       [ 0., 36., 37., 11., 15., 25., 26., 28., 29., 16., 30., 31., 17.,
         7.,  3., 12.,  4.,  1.,  8.,  5., 18., 13.,  9.,  6., 27., 32.,
        14., 19.,  2., 10., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 15., 16., 25., 28., 29., 30., 31., 26.,  7., 32.,
         3., 11., 12., 17.,  4., 27., 18., 13., 33.,  8., 19.,  5.,  9.,
        14.,  1.,  2.,  6., 10., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  1., 15., 28., 29., 25., 26., 30.,  7., 11.,  3.,
        31., 12., 32.,  8., 16., 17.,  4., 13., 27., 33.,  5., 18.,  6.,
         9., 19.,  2., 20., 14., 10., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 26., 16.,  7.,
         3., 32., 12.,  4., 17.,  8.,  1.,  5., 27., 33.,  2.,  6.,  9.,
        10., 13., 14., 18., 19., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31.,  7., 26.,  3.,
        16., 12., 17.,  4.,  8., 32., 27., 33., 18., 19.,  5.,  1., 13.,
         9., 20.,  2.,  6., 10., 14., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 16.,  7., 26.,
         3., 12.,  4., 17., 32.,  8.,  5., 18.,  9., 13., 33.,  6., 27.,
        19., 10., 20.,  1.,  2., 14., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  1., 15., 25., 28., 29., 30., 31.,  7., 11.,  3.,
        32., 16., 26., 12.,  4., 13., 17.,  8.,  5., 18., 27.,  9.,  2.,
        33., 19.,  6., 14., 10., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 26.,  7., 16.,
         3., 12.,  4.,  1., 17.,  8.,  5., 27., 32., 18.,  2.,  6.,  9.,
        10., 13., 14., 19., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31.,  7., 26., 16.,
        32.,  3., 17., 12.,  4., 33.,  8.,  5., 18.,  1.,  2.,  6.,  9.,
        10., 13., 14., 19., 20., 21., 22., 23., 24., 27., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 16.,  1., 26.,
         7., 32., 17., 12.,  3.,  4., 18., 27.,  8.,  5., 13.,  9., 33.,
        19.,  6.,  2., 10., 14., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  7., 11., 15., 25., 28., 29., 30., 31.,  3., 12.,
        26., 16., 17.,  4.,  8.,  1.,  5., 18., 27., 32.,  9., 19., 13.,
         6., 33., 10.,  2., 14., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 16., 26., 12.,
         7., 17., 32.,  3.,  4.,  1.,  8.,  5., 18.,  9., 13., 27.,  6.,
        19., 33.,  2., 10., 14., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  1., 11., 15., 25., 28., 29., 30., 26., 31., 16.,
         7., 32., 17.,  3., 12.,  4.,  8.,  5., 38., 27., 13., 33., 18.,
         2.,  6.,  9., 10., 14., 19., 20., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37.,  1., 15., 25., 28., 29., 30., 31., 16., 11.,  7.,
         3., 26., 32., 12.,  4., 17.,  8., 13.,  5.,  6.,  9., 27., 18.,
        14., 33., 19.,  2., 10., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31.,  7., 26., 16.,
         3., 17., 12.,  4.,  8.,  5., 18., 27., 32., 19.,  1.,  2.,  6.,
         9., 10., 13., 14., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 16., 12., 26., 31.,
         7.,  3., 32.,  4., 17.,  8., 18.,  5., 13.,  9., 27.,  1., 33.,
        19.,  6.,  2., 10., 14., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  1., 11., 15., 25., 28., 29., 30., 38., 31., 16.,
        32., 26., 33., 27., 12., 34., 13., 17.,  7.,  3., 18.,  4.,  8.,
         5., 19.,  9.,  6., 10., 20., 14., 21., 22.,  2., 23., 24., 35.],
       [ 0., 36., 37., 11., 15., 25., 26., 28., 29., 30., 31., 32., 33.,
        38.,  1.,  2., 12., 13., 16., 14., 17.,  7., 27.,  3.,  4., 18.,
         8.,  5.,  9., 19.,  6., 10., 20., 21., 22., 23., 34., 35., 24.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31.,  7., 16., 26.,
        32.,  3., 17.,  4., 12.,  1.,  8., 18.,  5.,  9., 33., 19., 27.,
         2.,  6., 10., 13., 14., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31.,  7., 16., 26.,
        32.,  3., 17., 12.,  4.,  8., 27., 18.,  1.,  5.,  9., 13., 33.,
        19.,  2.,  6., 10., 14., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  3.,  7., 11., 15., 25., 28., 29., 30., 16., 26.,
        31., 12.,  8., 17.,  4., 32., 33.,  5., 27., 18., 13., 19.,  9.,
         1.,  2.,  6., 10., 14., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 16.,  7., 26.,
        17.,  3., 12.,  1.,  4.,  8., 32., 18., 27.,  5., 33.,  2.,  6.,
         9., 10., 13., 14., 19., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  3.,  7., 15., 25., 28., 29., 16., 30., 11., 31.,
        12., 32., 26.,  1.,  4.,  8., 17., 33., 18., 27.,  5., 19.,  9.,
        13., 20.,  2.,  6., 10., 14., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  1., 11., 15., 28., 29., 30., 25., 31.,  7.,  3.,
        16., 26.,  4., 12., 17., 32.,  8., 18.,  5., 27., 13.,  2.,  6.,
         9., 10., 14., 19., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 26., 16., 31.,  7.,
         3.,  4.,  8., 17., 12.,  5., 18., 32.,  6., 27.,  1.,  2.,  9.,
        10., 13., 14., 19., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 16.,  7., 26.,
         3., 17., 12.,  4.,  1., 32.,  8.,  5.,  9., 18., 33.,  6., 13.,
        27., 19.,  2., 10., 14., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 11., 31., 16., 26.,  7.,
        12., 17.,  3.,  4.,  8.,  5., 13., 32., 18.,  9., 27.,  6., 14.,
        19.,  1.,  2., 10., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37.,  7., 11., 15., 25., 28., 29., 30., 16., 31., 26.,
         3.,  4., 12., 17., 32.,  8., 13.,  5., 18.,  6.,  9.,  1., 27.,
        33.,  2., 10., 14., 19., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 15., 28., 25., 29., 30., 31., 11., 16., 12., 32.,
         7., 17., 26.,  3.,  4.,  8., 18., 27., 33.,  5.,  9.,  1., 13.,
         6., 19.,  2., 10., 14., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 31., 11.,  7., 32., 12.,
        26., 16.,  3.,  4., 17., 18.,  8.,  1., 13.,  5.,  9., 27.,  2.,
         6., 10., 14., 19., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 16.,  7.,  3.,
        26.,  4., 32., 12., 17.,  8., 27., 18.,  1.,  5.,  2.,  6.,  9.,
        10., 13., 14., 19., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 31., 38., 32., 33., 26.,
        11.,  7., 16.,  3.,  4., 12., 17.,  8., 27., 18.,  5.,  1., 13.,
        19.,  9., 34., 14.,  6., 10.,  2., 20., 21., 22., 23., 24., 35.],
       [ 0., 36., 37.,  1., 15., 25., 28., 29., 38., 30., 11., 31., 16.,
        32., 26., 33.,  7.,  3.,  4., 12.,  8., 27., 17., 13., 18.,  5.,
         9., 19., 20., 34.,  2.,  6., 14., 10., 21., 22., 23., 24., 35.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 26., 16.,  7.,
        12.,  3., 17.,  4., 32.,  8., 18., 27.,  1., 33.,  5., 34., 19.,
         9.,  2.,  6., 10., 13., 14., 20., 21., 22., 23., 24., 35., 38.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 31., 32., 11.,  7., 33.,
        26., 12., 16., 17.,  3.,  4.,  1., 38.,  8.,  5., 27., 18.,  9.,
         6., 13., 10., 19.,  2., 14., 20., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 15., 28., 29., 30., 25., 26., 31., 16., 11., 17.,
         7.,  3., 12., 32.,  4., 27.,  8., 33., 18.,  5.,  1., 19., 13.,
         9., 20.,  6.,  2., 10., 14., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 32., 16.,  1.,
        26.,  7., 33.,  3., 17., 12.,  4.,  8., 38.,  5., 13., 18., 27.,
         9., 19.,  2.,  6., 10., 14., 20., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37.,  7., 11., 15., 25., 28., 29.,  3., 30., 16., 31.,
        26., 17., 32., 12., 18.,  4.,  8., 33., 13.,  5., 27.,  1.,  2.,
         6.,  9., 10., 14., 19., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 16., 31.,  7.,  3.,
        26., 17., 12.,  8.,  4., 32., 33.,  5., 27.,  9., 18.,  1.,  2.,
         6., 10., 13., 14., 19., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 16., 26., 17.,
        12., 32.,  7.,  3., 18.,  4., 33.,  8., 27.,  1.,  5.,  9., 19.,
        13.,  6., 34.,  2., 10., 14., 20., 21., 22., 23., 24., 35., 38.],
       [ 0., 36., 37., 11., 28., 29., 30., 31., 38., 32., 12., 25.,  7.,
        13., 15., 26., 27.,  3.,  1., 33.,  8., 16., 17., 18., 19., 14.,
         4.,  9.,  2.,  5., 20., 21.,  6., 22., 10., 34., 23., 24., 35.],
       [ 0., 36., 37.,  7.,  3., 15., 11., 25., 28., 29., 30., 16., 31.,
        26., 12.,  4.,  8., 17., 13., 32.,  9., 27., 33.,  5., 18.,  1.,
         2.,  6., 10., 14., 19., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 31., 11., 16.,  7., 32.,
         3., 26., 12., 17.,  4.,  8., 33., 18., 27., 13.,  1.,  5., 19.,
         2.,  6.,  9., 10., 14., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 16., 26., 31., 11.,  7.,
        32., 17., 12.,  3.,  4., 13.,  1., 18.,  8., 27.,  5., 19.,  9.,
        33.,  6., 14., 10., 20.,  2., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30.,  7., 31., 26.,  3.,
         4., 16., 12., 32., 17.,  8.,  5., 33., 18., 27., 19., 13.,  6.,
         1.,  2.,  9., 10., 14., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 26., 28., 29., 30., 31., 16.,  7.,
        32., 17.,  3., 12.,  8.,  4.,  1.,  5.,  9., 27., 18., 13., 33.,
        19., 14., 34.,  6.,  2., 10., 20., 21., 22., 23., 24., 35., 38.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 31., 26.,  7., 11., 16.,
         3., 12.,  4., 32., 17.,  8.,  5.,  1., 13., 18.,  9., 27.,  6.,
        19.,  2., 10., 14., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 15., 28., 29., 30., 25., 31., 26., 11.,  7., 16.,
         3.,  1., 12., 17.,  8.,  4., 13.,  5., 18., 32., 27.,  9.,  6.,
        19.,  2., 10., 14., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 16., 26., 32.,
        12., 33., 13.,  7.,  3.,  4., 17.,  8., 18.,  9.,  1., 27.,  5.,
         6., 19., 38., 20., 10.,  2., 14., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 31., 26., 11.,  7., 16.,
         3., 12.,  4., 17.,  8.,  5., 32.,  9., 18.,  1., 13., 27., 19.,
         6.,  2., 10., 14., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 16., 25., 28., 29., 30., 26.,  7., 31.,
        12.,  3.,  4.,  8., 17., 32., 13., 27.,  5.,  9.,  1.,  2.,  6.,
        10., 14., 18., 19., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 11., 31., 16., 26., 12.,
         7.,  3., 17.,  4.,  8., 32., 18., 13.,  9.,  5., 27., 19.,  1.,
         6.,  2., 10., 14., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 26., 16., 31., 11.,  7.,
         3., 17.,  4., 32.,  8., 12.,  1., 13.,  5.,  9., 27., 18., 19.,
         2.,  6., 10., 14., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37.,  1., 15., 25., 28., 11., 29., 30., 26., 31., 16.,
         3.,  7., 17., 32., 12.,  4., 13.,  8., 18.,  5.,  9., 27.,  2.,
        33.,  6., 19., 10., 14., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  1.,  2., 28., 29., 30., 31., 32., 11., 15., 25.,
        33.,  7., 26., 16., 12., 27., 17., 13.,  8., 18.,  3.,  9.,  4.,
         5., 14., 19.,  6., 38., 20., 21., 10., 22., 23., 24., 34., 35.],
       [ 0., 36., 37.,  1., 25., 28., 29., 30., 31., 38., 15., 32., 33.,
         2., 11., 16., 26., 12.,  7., 27., 13.,  3.,  4.,  8., 17., 18.,
        19.,  5., 14.,  9., 20.,  6., 34., 10., 21., 22., 23., 24., 35.],
       [ 0., 36., 37., 15., 28., 29., 30., 31., 25., 11., 32., 16.,  3.,
         7., 26., 12.,  1., 17.,  8.,  4., 18.,  5., 27., 13., 33.,  9.,
        19.,  6., 14.,  2., 10., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  7., 11., 15., 28., 29., 30., 25.,  3., 26., 16.,
        31., 17., 12.,  4.,  8., 32.,  5.,  1., 18.,  9., 13.,  6., 33.,
        27., 19.,  2., 10., 14., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 32.,  7.,  1.,
        33., 16., 12.,  3., 26., 17.,  4.,  8., 18., 38., 27.,  9., 13.,
        19.,  5.,  6.,  2., 20., 10., 14., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31.,  7.,  3., 16.,
        26., 12.,  4., 17.,  8.,  5., 18., 32., 27.,  6.,  1.,  9., 33.,
        19., 13.,  2., 10., 14., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 15.,  7., 25., 28., 29., 11., 30., 31.,  3., 12.,
        16., 32., 26.,  4.,  8., 17., 13.,  5., 18., 27., 33., 19.,  9.,
        20.,  6.,  1.,  2., 10., 14., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  1., 15., 25., 28., 29., 30., 31., 38., 32., 33.,
        34., 11., 26., 16., 12., 35., 27.,  7., 17., 13., 18., 19.,  3.,
         4.,  2.,  8., 14.,  9.,  5., 20.,  6., 10., 21., 22., 23., 24.],
       [ 0., 36., 37.,  1., 11., 15., 25., 28., 29., 30., 31., 32.,  3.,
        38.,  7., 16.,  4., 26.,  8., 12., 17., 27., 18.,  5.,  9., 13.,
        19.,  6., 20., 14., 10., 33., 21.,  2., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 31., 11.,  7.,  3., 16.,
        26.,  4., 12., 17.,  8.,  5., 13., 18., 27., 32., 14.,  9., 19.,
         6., 10.,  1.,  2., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 15., 28., 29., 30., 25., 31., 11.,  7., 32., 12.,
        16.,  3.,  1., 26., 17.,  8.,  4., 13., 18., 27.,  9.,  5., 19.,
         6., 14., 20., 21.,  2., 10., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37.,  7., 11., 15., 25., 28., 29., 30., 31., 32.,  3.,
        12.,  4., 26., 16.,  8., 17., 38., 13., 33.,  5.,  9., 18., 27.,
         1.,  2.,  6., 10., 14., 19., 20., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37.,  3.,  7., 11., 28., 15., 29., 25.,  4., 30., 31.,
        12., 16., 26., 17., 32.,  8., 27., 18.,  5., 33., 19.,  1.,  2.,
         6.,  9., 10., 13., 14., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  1., 15., 25., 28., 29., 30., 31.,  7., 11., 26.,
        32.,  3., 16., 17., 12.,  8.,  4., 13.,  5., 33., 18., 27., 38.,
         9., 19., 14., 20.,  6., 10.,  2., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 26., 31., 16., 12.,
         3.,  7., 17., 32.,  8.,  1.,  4., 33., 18., 27., 38., 13.,  5.,
         9.,  2., 19.,  6., 10., 14., 20., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 15., 28., 29., 30., 31., 11., 25., 26.,  7., 16.,
         3., 12., 17.,  4.,  8.,  5., 13., 32.,  6., 18.,  9., 27.,  1.,
         2., 10., 14., 19., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 31., 11., 26., 16.,  7.,
         3., 17., 32., 12.,  4.,  8.,  1., 18., 33.,  5., 13.,  9.,  6.,
        27., 14., 19., 10.,  2., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30.,  7., 31., 16.,  3.,
         4., 26.,  8., 12., 17., 32.,  5., 18.,  1., 27., 19.,  2.,  6.,
         9., 10., 13., 14., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 12., 16.,  7.,
         3.,  8., 26.,  4., 17., 27.,  1.,  5., 13., 18.,  9., 32., 14.,
        19.,  6.,  2., 33., 10., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 15., 28., 25., 29., 30., 11., 31.,  7., 26., 32.,
         3., 16.,  1., 17., 12.,  4.,  8., 33., 18., 13., 27.,  5.,  2.,
        19.,  6.,  9., 10., 14., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 26., 28., 29., 30., 31., 32., 33.,
        38.,  1.,  7., 16., 12., 27., 17.,  3., 34.,  4., 18.,  8., 13.,
         5., 19.,  9., 14., 20.,  2.,  6., 21., 10., 22., 23., 24., 35.],
       [ 0., 36., 37.,  7., 15., 25., 28., 29., 11., 30.,  3., 26., 16.,
        31.,  4., 12., 17., 32., 13., 27.,  8., 33., 18.,  5.,  9.,  6.,
        19.,  1.,  2., 10., 14., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30.,  7., 31.,  3., 16.,
        26., 12.,  4., 17., 32.,  8., 18.,  1.,  5., 13., 27.,  2.,  6.,
         9., 10., 14., 19., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 15., 11., 25., 28., 29.,  7., 30., 31., 32., 26.,
         3., 16.,  4., 33., 17., 12.,  8., 13.,  5.,  1.,  2.,  6.,  9.,
        10., 14., 18., 19., 20., 21., 22., 23., 24., 27., 34., 35., 38.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 26., 16., 11.,  7., 31.,
         3., 17., 12.,  4., 32.,  8., 13., 18., 33., 27.,  5., 14.,  9.,
        19., 20.,  1.,  6.,  2., 10., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  1.,  2.,  7., 15., 25., 26., 28., 29., 30., 31.,
        32., 16., 11., 33.,  3., 17., 38., 27.,  4.,  8., 12., 18.,  5.,
         9., 13.,  6., 10., 14., 19., 20., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 31., 32., 33., 38.,  1.,
        26., 16., 27., 11., 12.,  7.,  3.,  4., 17., 13., 18.,  8.,  5.,
         9., 19., 34., 20.,  6.,  2., 10., 14., 21., 22., 23., 24., 35.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 16., 31., 11., 26.,  7.,
        12., 32.,  3., 17.,  8.,  4.,  5.,  1., 18., 13., 27.,  9.,  6.,
        10., 14., 19.,  2., 33., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 31., 16., 26., 11.,  7.,
        17.,  3.,  4., 12.,  8., 32., 18.,  5.,  9., 13.,  6., 33., 19.,
        14., 10.,  1., 27.,  2., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  1., 15., 25., 28., 29., 26., 30., 11., 16., 31.,
         7., 12.,  3.,  8., 17.,  4., 32., 18., 33., 38., 13.,  2.,  5.,
        27.,  9., 19.,  6., 10., 14., 20., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 15., 28., 29., 25., 30.,  7., 31., 26., 16., 17.,
        11.,  3., 12., 32.,  4., 13.,  8.,  5., 33., 27., 18.,  1., 14.,
         9., 19.,  6.,  2., 10., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  1., 11., 15., 28., 29., 30., 25., 31., 16., 12.,
         7.,  3., 26.,  4., 17.,  8.,  5., 32., 18.,  9., 13., 27., 33.,
         6.,  2., 34., 10., 14., 19., 20., 21., 22., 23., 24., 35., 38.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 31.,  7., 16., 11.,  3.,
        12., 17., 26.,  4.,  8.,  1., 32.,  5., 13., 27., 18.,  9., 19.,
         2.,  6., 10., 14., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37.,  1.,  2., 11., 12., 15., 25., 28., 29., 30., 31.,
        32., 33., 38., 34., 35., 13.,  3., 26.,  7., 16.,  4., 27.,  8.,
         5., 17.,  6.,  9., 18., 19., 20., 14., 21., 10., 22., 23., 24.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 31., 11., 32., 16.,  7.,
        17., 26.,  3., 12.,  4.,  8., 13.,  5., 18., 27.,  9., 33., 34.,
         6., 10., 14., 19.,  1.,  2., 20., 21., 22., 23., 24., 35., 38.],
       [ 0., 36., 37.,  1.,  2.,  3.,  7., 11., 15., 25., 26., 28., 29.,
        30., 31., 32., 33., 34., 35., 38., 16., 12., 27.,  4.,  8., 17.,
         9.,  5., 18., 13.,  6., 10., 19., 14., 20., 21., 22., 23., 24.],
       [ 0., 36., 37.,  3.,  7., 11., 15., 28., 29., 25., 30., 31., 12.,
        26., 16.,  8.,  4., 32., 17., 33.,  5., 34.,  1.,  2.,  6.,  9.,
        10., 13., 14., 18., 19., 20., 21., 22., 23., 24., 27., 35., 38.]])

unit_ranking_clusters_200 = np.array([[ 0., 36., 37.,  7., 25., 28., 29., 30., 15., 26., 31., 11., 16.,
        12.,  3.,  4., 17.,  8., 32., 13.,  9.,  5., 18., 27., 33., 19.,
        20., 34.,  6., 10.,  1.,  2., 14., 21., 22., 23., 24., 35., 38.],
       [ 0., 36., 37., 11., 12., 15., 25., 28., 29., 30., 31., 16.,  7.,
         3.,  8., 26., 13.,  4., 17., 27.,  1.,  5., 18.,  9., 14., 32.,
        19., 10.,  6.,  2., 33., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  1., 11., 15., 28., 29., 30., 31., 38., 25., 16.,
        26., 32.,  3.,  7., 12., 17., 18., 33.,  2.,  8.,  4., 13., 19.,
         9.,  5., 14., 27.,  6., 10., 20., 34., 21., 35., 22., 23., 24.],
       [ 0., 36., 37., 11., 12., 15., 25., 28., 29., 30., 31., 16., 13.,
        26.,  7.,  3.,  4., 17.,  8., 32.,  1.,  5.,  9., 18., 33., 27.,
        19., 34.,  6., 10., 20.,  2., 14., 21., 22., 23., 24., 35., 38.],
       [ 0., 36., 37., 11., 12., 15., 25., 28., 29., 16., 26., 30.,  7.,
         3., 17., 31.,  4.,  8., 32., 18.,  5., 13.,  9.,  1., 19., 27.,
        10.,  6., 20., 14., 33.,  2., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 12., 15., 25., 28., 29., 30., 31.,  7., 16.,
        26., 32.,  3., 17.,  8., 13.,  4., 27., 18.,  1.,  9., 19.,  5.,
        38., 14., 33., 10., 20.,  2.,  6., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 31., 16., 32., 11., 38.,
         7., 17., 12.,  8., 26.,  3., 13.,  4., 18., 33., 19., 27.,  9.,
         5., 14., 20.,  1.,  2.,  6., 10., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37.,  1., 28., 29., 30., 31., 32., 11.,  7., 12., 25.,
        38., 13., 15.,  8., 26.,  9.,  3.,  4., 10., 14., 16., 17., 27.,
        18., 19.,  5., 20.,  6., 33., 21.,  2., 22., 23., 24., 34., 35.],
       [ 0., 36., 37.,  7., 11., 15., 16., 25., 28., 29., 30., 31.,  3.,
        12., 26., 17., 13.,  4.,  8.,  1.,  5.,  9., 18., 27., 32., 19.,
        38., 14., 10.,  6., 33.,  2., 20., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 11., 12., 28., 29., 30., 31., 38., 32., 13., 25.,
         7., 14., 15.,  8., 26., 27.,  3.,  1., 33., 16.,  9., 17., 18.,
        19., 20.,  4.,  2.,  5., 10., 21., 22.,  6., 23., 34., 24., 35.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 32.,  7.,  1.,
        33., 12., 16.,  3., 26., 17.,  4., 18.,  8., 38., 19., 27.,  9.,
        13.,  5.,  6.,  2., 10., 20., 21., 14., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 16., 26., 38.,
        32., 12., 33., 13.,  7.,  3.,  4., 17.,  8., 18.,  9.,  1., 27.,
         5.,  6., 19., 10., 20.,  2., 14., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 26., 31., 38., 16.,
        12., 17.,  3.,  7., 32.,  8.,  1., 18.,  4., 33., 27.,  9., 13.,
         5., 19.,  2.,  6., 20., 10., 14., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 11., 12., 31., 16.,  7.,
        26.,  3., 13.,  4.,  8., 32., 17.,  9.,  1.,  5., 10., 27., 18.,
        14., 19., 20.,  2.,  6., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 26., 28., 29., 30., 31., 32., 33.,
        38., 12.,  1., 16.,  7., 27., 17.,  3., 34., 18.,  4.,  8., 13.,
         9.,  5., 19., 20., 14., 10., 21.,  2.,  6., 22., 23., 24., 35.],
       [ 0., 36., 37.,  7., 11., 15., 25., 28., 29., 16., 30., 31., 26.,
         3.,  4., 17., 12., 32.,  8., 18.,  9., 13.,  5.,  6., 10.,  1.,
        19., 27., 14., 33.,  2., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 15., 28., 29., 30., 31., 11., 25., 26.,  7., 16.,
         3., 12., 17.,  4.,  8.,  5., 18., 13., 32.,  6.,  9., 10., 27.,
        19.,  1.,  2., 14., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 11., 16., 31., 12., 26.,
         7.,  3., 13., 17.,  8.,  4., 32., 18.,  9.,  5., 19., 27.,  1.,
        10.,  6., 20.,  2., 14., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 11., 12., 15., 25., 28., 29., 30., 31., 32., 33.,
         7.,  8.,  1.,  3., 16.,  9.,  4., 26., 17.,  5., 38., 13., 14.,
        18., 10., 27., 19., 20.,  6., 21., 22.,  2., 23., 24., 34., 35.],
       [ 0., 36., 37.,  1., 28., 29., 30., 31., 32., 38.,  7.,  3., 11.,
        12., 15., 13.,  8., 25.,  4., 26.,  9.,  5., 16., 17., 18., 14.,
         6., 19., 27.,  2., 33., 10., 20., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 11., 31., 16., 26., 12.,
         7., 17.,  3., 13.,  4.,  8.,  5.,  9., 32., 18., 14., 27., 10.,
         6., 19., 20.,  1.,  2., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 38., 31., 32., 11., 16.,
        12.,  7., 33., 26., 17., 13.,  3.,  4.,  1., 18.,  8.,  5., 27.,
         9., 10.,  6., 19.,  2., 14., 20., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37.,  1., 15., 28., 29., 25., 38., 30., 26., 11., 16.,
        31.,  7., 12.,  8.,  3.,  4., 17.,  9., 32., 13., 33., 18.,  5.,
        14., 19., 27., 34., 10.,  6., 20.,  2., 21., 22., 23., 24., 35.],
       [ 0., 36., 37.,  1., 28., 29., 30., 31., 32., 38., 25.,  7., 15.,
        11., 26.,  2., 12., 13., 16.,  8., 17.,  3., 18., 33.,  4., 27.,
         9.,  5., 19., 10.,  6., 14., 20., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37.,  1., 15., 25., 26., 28., 29., 30., 31., 32., 33.,
        34., 16., 38., 27., 17., 35., 18.,  7.,  3., 11., 12., 19.,  4.,
         8., 13.,  9.,  2., 14.,  5., 10.,  6., 20., 21., 22., 23., 24.],
       [ 0., 36., 37.,  1.,  7., 25., 26., 28., 29., 30., 31., 27., 32.,
        33., 34., 15., 38.,  2., 11., 12.,  3., 16.,  8., 35.,  4., 13.,
        17.,  9., 18., 14.,  5., 19., 10., 20.,  6., 21., 22., 23., 24.],
       [ 0., 36., 37., 15., 28., 29., 30., 25., 31., 16., 26., 11.,  7.,
        12.,  3.,  1., 17., 13.,  8.,  4.,  5.,  9., 18., 32., 27., 19.,
        10.,  6., 20., 14.,  2., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 28., 25., 29., 30., 31., 16., 12.,  7.,
        26.,  3., 17., 32.,  4.,  8., 38.,  5.,  1.,  9., 33., 18., 27.,
        19., 10., 13.,  6.,  2., 14., 20., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 16., 31.,  7., 17.,
         3., 26., 12.,  8.,  4., 32., 33.,  9.,  5., 27., 18.,  1.,  2.,
         6., 10., 13., 14., 19., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  1.,  2., 28., 29., 30., 31., 32., 11., 12., 15.,
        38., 25., 33.,  7., 16., 26.,  8., 27., 17., 13., 18.,  9.,  3.,
        19., 14.,  4.,  5., 10., 20.,  6., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37.,  1., 11., 28., 29., 30., 31., 32., 12., 15., 38.,
         7., 25.,  3., 13., 16., 26.,  8.,  4., 17.,  5., 33.,  9., 18.,
        27.,  2., 19., 14., 10., 20.,  6., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 11., 12., 15., 25., 28., 29., 30., 31., 38., 32.,
        13., 16.,  1., 26., 33., 14.,  7.,  3.,  8., 17.,  2.,  4.,  9.,
        18.,  5., 27., 10., 19., 20., 21.,  6., 22., 34., 23., 24., 35.],
       [ 0., 36., 37.,  1., 25., 28., 29., 30., 31., 38., 15., 32., 33.,
         2., 16., 11., 12., 26., 13.,  7., 27.,  8.,  3.,  4., 17., 18.,
        19., 14.,  9.,  5., 20., 10.,  6., 34., 21., 22., 23., 24., 35.],
       [ 0., 36., 37.,  1., 25., 28., 29., 30., 31., 15., 38., 32.,  2.,
        11.,  3., 12.,  4.,  7., 16.,  8., 33., 26.,  5., 13., 27.,  6.,
        17., 14.,  9., 18., 19., 20., 10., 21., 22., 34., 23., 24., 35.],
       [ 0., 36., 37.,  1.,  2., 11., 25., 26., 28., 29., 30., 31., 32.,
        33., 34., 38., 35., 12.,  7.,  3., 15.,  8., 13., 27., 14.,  4.,
        16.,  5.,  9.,  6., 10., 17., 18., 19., 20., 21., 22., 23., 24.],
       [ 0., 36., 37., 15., 25., 28., 29., 16., 30., 31., 11., 26.,  7.,
        12., 17., 32.,  8.,  3., 13.,  4.,  5.,  1., 18.,  9., 27., 14.,
        19.,  6., 10.,  2., 33., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 31., 32., 26.,  7., 11.,
        12.,  3., 16.,  8.,  4., 17., 38., 13., 18., 33.,  9.,  1., 19.,
        27., 14.,  5., 10., 20.,  2.,  6., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 16., 26., 11., 12.,  7.,
         8., 31.,  3., 17.,  4.,  9., 13., 32.,  5., 18., 14.,  6., 19.,
         1.,  2., 10., 20., 21., 22., 23., 24., 27., 33., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 12., 30., 31.,  7., 16.,
        26.,  3., 17.,  4.,  8., 13.,  9., 18.,  5., 27., 19., 32.,  1.,
         2.,  6., 10., 14., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 12., 16., 26.,  7., 30.,
        17.,  3., 31.,  4.,  8.,  9., 32., 13.,  5., 18., 19.,  1.,  2.,
         6., 10., 14., 20., 21., 22., 23., 24., 27., 33., 34., 35., 38.],
       [ 0., 36., 37.,  1., 25., 26., 28., 29., 30., 31., 32., 33., 27.,
        38., 34., 15., 11., 12.,  7., 16.,  3.,  4.,  8., 35.,  2., 13.,
         9.,  5., 10.,  6., 14., 17., 18., 19., 20., 21., 22., 23., 24.],
       [ 0., 36., 37.,  1.,  2., 25., 26., 27., 28., 29., 30., 31., 32.,
        33., 34., 35., 38.,  7.,  3.,  4., 11., 12.,  8., 13.,  9.,  5.,
        14., 15., 16.,  6., 17., 10., 18., 19., 20., 21., 22., 23., 24.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30.,  7., 31., 16.,  3.,
        26., 12., 17.,  4.,  8., 32.,  1.,  9., 13.,  5., 10., 18., 33.,
         6.,  2., 14., 19., 20., 21., 22., 23., 24., 27., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 16., 25., 28., 29., 30., 26.,  7., 31.,
         3., 12.,  4.,  8., 17., 13., 32., 18.,  9., 33., 19.,  5., 27.,
        10., 20.,  6., 34.,  1.,  2., 14., 21., 22., 23., 24., 35., 38.],
       [ 0., 36., 37., 15., 28., 29., 30., 16., 25., 31., 26., 11.,  7.,
        12.,  3.,  4.,  8., 13., 17., 32.,  9., 18.,  5., 27., 19.,  6.,
        14.,  1.,  2., 10., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37.,  7., 25., 26., 27., 28., 29., 30., 31., 32., 33.,
        38., 34.,  8., 35., 11., 12.,  1., 15., 16., 17., 13.,  9., 14.,
         3.,  4., 10.,  2., 18.,  5.,  6., 19., 20., 21., 22., 23., 24.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 16.,  7., 31., 12.,
         8.,  3.,  4., 26., 17., 32., 13.,  9.,  5., 18.,  1., 19., 27.,
         2.,  6., 10., 14., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 26., 16., 12., 31.,
         7.,  3.,  4.,  8., 17.,  5., 18., 13.,  9., 32.,  6., 19., 27.,
         1.,  2., 10., 14., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37.,  1.,  7., 11., 28., 29., 30., 31., 32., 33., 34.,
        38.,  3., 35., 12., 25.,  2., 15., 16.,  4., 26.,  8., 27.,  5.,
         9., 13., 17., 10., 14.,  6., 18., 19., 20., 21., 22., 23., 24.],
       [ 0., 36., 37.,  1., 11., 15., 28., 29., 30., 25., 31.,  7.,  3.,
        16., 26.,  8.,  4., 12., 17., 32.,  9., 13., 18., 19.,  5., 27.,
         2.,  6., 10., 14., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37.,  7., 11., 15., 25., 28., 29., 30., 31., 12.,  3.,
        32., 16.,  8.,  4., 26., 13., 38., 17., 18., 27.,  9., 33.,  5.,
        14.,  6., 19.,  1., 10., 20.,  2., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 11., 15.,  7.,  3., 28., 29.,  1., 25., 12., 30.,
         8.,  4., 31., 16., 26., 17., 18., 32., 27.,  5.,  9., 19.,  2.,
        33., 13.,  6., 10., 14., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 26., 31., 32., 38.,
         1., 27., 12.,  7., 16., 17.,  3., 33.,  4.,  8.,  9.,  5., 18.,
        19., 13., 20., 34.,  6.,  2., 10., 21., 14., 22., 23., 24., 35.],
       [ 0., 36., 37.,  1., 25., 28., 29., 30., 31., 38., 32., 15., 26.,
        33., 34., 11., 16., 12.,  7.,  3.,  4.,  8., 27., 17., 13., 18.,
         9.,  2.,  5., 19., 14., 35.,  6., 10., 20., 21., 22., 23., 24.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 16., 30., 12.,  7.,  3.,
         8., 31., 26., 17.,  4., 13., 32.,  9.,  1., 18., 27.,  5., 19.,
         2.,  6., 10., 14., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 31., 11., 26., 12., 16.,
         7.,  3., 17., 32., 13.,  4.,  8., 18.,  1., 33.,  9.,  5., 10.,
         6., 27., 14., 19., 20.,  2., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  1., 15., 25., 28., 29., 30., 26., 11., 12., 16.,
         3., 31.,  7., 17.,  4.,  8., 18., 38., 32., 13.,  5.,  9., 33.,
        19., 14., 27.,  2., 10.,  6., 20., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 11., 15., 28., 29., 30., 25., 26., 31., 16.,  7.,
        12.,  3., 17.,  4.,  8., 32.,  9.,  1., 18.,  5., 13., 33.,  6.,
        38., 19., 14., 10.,  2., 20., 21., 22., 23., 24., 27., 34., 35.],
       [ 0., 36., 37.,  1., 11., 15., 25., 28., 29., 30., 16., 26., 31.,
         7., 32., 12., 17.,  8.,  3.,  4., 18., 38.,  9.,  5., 27., 13.,
        33.,  2., 19., 14.,  6., 10., 20., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 31., 26.,  7., 11., 12.,
        16.,  3.,  4.,  8., 32., 17., 13.,  5., 18.,  9.,  1., 27., 19.,
         6., 20.,  2., 10., 14., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37.,  7., 11., 25., 28., 29., 30., 31., 32., 33., 12.,
        38.,  1., 15.,  2., 26., 13., 16.,  3.,  8., 17., 27., 18.,  4.,
         5.,  9., 19.,  6., 20., 21., 10., 22., 34., 23., 14., 24., 35.],
       [ 0., 36., 37., 11., 15., 25., 26., 28., 29., 30., 31., 32., 33.,
        38., 16., 12., 27.,  1., 17., 18.,  7.,  8.,  3., 13., 19.,  9.,
         2.,  4.,  5., 10., 14.,  6., 20., 34., 21., 22., 35., 23., 24.],
       [ 0., 36., 37., 15., 28., 29., 25., 30., 31.,  7., 11., 26., 16.,
        12.,  3., 17., 13.,  8.,  4., 18., 32., 27.,  9.,  5., 19., 10.,
        14., 33.,  1.,  2.,  6., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31.,  7., 26., 16.,
        32.,  3., 17., 12.,  4.,  8., 33., 18.,  5., 19.,  1.,  2.,  6.,
         9., 10., 13., 14., 20., 21., 22., 23., 24., 27., 34., 35., 38.],
       [ 0., 36., 37.,  7., 15., 25., 28., 29., 11., 30., 12.,  3., 16.,
        26.,  8.,  4., 17., 31., 13., 27., 18.,  9., 32.,  5., 14., 19.,
        10.,  6.,  1., 20.,  2., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37.,  1.,  3.,  4.,  7.,  8., 11., 12., 15., 16., 17.,
        18., 25., 26., 27., 28., 29., 30., 31., 32., 33., 34., 35., 38.,
        19.,  2., 13.,  5., 20.,  9.,  6., 10., 21., 22., 23., 24., 14.],
       [ 0., 36., 37.,  1., 11., 15., 28., 29., 30., 25., 12., 16., 31.,
         7.,  3., 26.,  4., 17., 13.,  8.,  5., 32., 18.,  9., 27., 19.,
        33.,  6., 10., 14.,  2., 34., 20., 21., 22., 23., 24., 35., 38.],
       [ 0., 36., 37.,  7.,  3., 15., 11., 25., 28., 16., 29., 30., 12.,
        31., 26., 17.,  8.,  4., 13.,  9., 32., 18., 10., 27., 33.,  5.,
         1.,  2.,  6., 14., 19., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  3.,  7., 11., 15., 28., 29., 25., 30., 31.,  8.,
        16., 12., 26.,  4., 32., 17., 33.,  9.,  5., 34.,  1.,  2.,  6.,
        10., 13., 14., 18., 19., 20., 21., 22., 23., 24., 27., 35., 38.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 31., 11.,  7., 26.,  3.,
        16., 12., 17.,  8.,  4., 32.,  9.,  5., 18., 10.,  6., 13.,  1.,
         2., 14., 19., 20., 21., 22., 23., 24., 27., 33., 34., 35., 38.],
       [ 0., 36., 37., 11., 12., 15., 16., 25., 28., 29., 30., 26., 31.,
        17.,  7.,  3., 32.,  4.,  8., 13., 18.,  5.,  9., 14., 27.,  1.,
        33., 19., 10.,  6., 20.,  2., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  1., 15., 25., 28., 29., 26., 30., 16., 11., 31.,
         7., 12.,  3., 17.,  8.,  4., 18.,  9., 32., 13., 33., 38.,  2.,
         5., 19., 27., 14., 10.,  6., 20., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 16., 31.,  7., 26.,
        17.,  3., 12.,  1.,  4.,  8., 32., 18., 27., 19.,  9.,  5., 33.,
         2., 13.,  6., 10., 14., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 16., 25., 28., 29., 30., 26., 12.,  7.,
        31.,  8.,  3.,  4., 17.,  9., 13., 32., 18., 27.,  5., 10.,  1.,
         2.,  6., 14., 19., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 11., 25., 28., 12., 15., 29., 30., 31., 16.,  7.,
        26., 17.,  3.,  8., 32.,  4.,  5., 18.,  9., 19.,  6., 10., 27.,
        20., 33.,  1.,  2., 13., 14., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 12., 15., 25., 28., 29., 30., 31.,  7., 16.,
        26., 32.,  3., 17.,  4.,  8.,  1., 13., 18., 38.,  5., 19.,  9.,
        33., 27.,  2.,  6., 10., 14., 20., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 11., 15., 25., 28., 16., 26., 29., 12., 30.,  7.,
         3., 31.,  4., 17.,  8., 32., 18.,  5.,  9., 13., 19., 33.,  6.,
        27., 10., 20.,  1.,  2., 14., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  3.,  7., 11., 28., 15., 29., 25.,  4., 30., 31.,
        12., 16., 26.,  8., 17., 32., 18., 27., 19.,  5., 33.,  9.,  1.,
         2.,  6., 10., 13., 14., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 12., 16., 26.,
         7.,  3., 17.,  4.,  8., 13., 32., 18., 27., 19.,  9.,  5., 14.,
        20.,  1.,  6., 21., 10.,  2., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 12., 16.,  7., 31.,
        32.,  3., 26., 13., 17.,  8.,  4.,  1., 27., 18.,  5.,  9., 33.,
        14., 19., 34.,  2.,  6., 20., 10., 21., 22., 23., 24., 35., 38.],
       [ 0., 36., 37., 11., 12., 15., 25., 28., 29., 30., 31., 16., 26.,
         7., 17., 13., 32.,  3.,  8.,  4.,  1., 38., 18.,  5.,  9., 19.,
        14., 27.,  6., 10., 33.,  2., 20., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 26., 16.,  7.,
         3., 32., 12., 17.,  4., 38.,  8.,  9.,  1., 18.,  5., 27., 13.,
        33.,  2.,  6., 10., 14., 19., 20., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 26., 11.,  7., 31., 12.,
        16.,  3., 17., 32.,  4.,  8., 18., 13., 19., 33., 34., 27.,  9.,
         5., 20.,  1.,  2.,  6., 10., 14., 21., 22., 23., 24., 35., 38.],
       [ 0., 36., 37.,  1., 15., 25., 28., 29., 30., 31.,  7., 11., 26.,
        32.,  3.,  8., 16., 17., 12.,  4., 13.,  9., 14.,  5., 18., 33.,
        38., 27., 19., 20.,  6., 10., 21.,  2., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 31., 26., 11., 12.,  7.,
        16.,  3., 13.,  4., 17.,  8.,  5.,  9., 32., 18.,  1., 10., 14.,
        19., 27.,  6., 20.,  2., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 11., 12., 15., 25., 28., 29., 30., 31.,  7., 16.,
         3.,  8., 26.,  4., 17., 13., 18.,  5.,  9., 32., 19., 27.,  6.,
         1., 33., 10., 20.,  2., 14., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 31., 11.,  7., 12.,  3.,
        26., 16.,  8.,  4., 17., 13., 32.,  5.,  9., 27., 18., 19.,  1.,
         2.,  6., 10., 14., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 26., 12.,  7.,
        16.,  3.,  8., 13.,  4., 17.,  1.,  5.,  9., 27., 32., 18., 19.,
         2.,  6., 10., 14., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37.,  1., 15., 25., 28., 29., 30., 31.,  7., 11., 12.,
         3., 32., 16., 26., 13.,  4.,  8., 17., 14., 18.,  5., 38.,  9.,
        27.,  2., 19., 33.,  6., 20., 10., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 15., 16., 25., 28., 29., 30., 26., 31., 17., 11.,
         7., 12.,  3.,  4., 32.,  8., 13.,  1.,  5.,  9., 14., 10., 18.,
        38., 27., 19., 20.,  2.,  6., 21., 22., 23., 24., 33., 34., 35.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 16., 12.,  7.,
        26.,  3.,  8., 17.,  4., 13., 32., 27., 18.,  9., 33., 19.,  5.,
         1., 20., 10.,  2.,  6., 14., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 31.,  7., 16.,  8., 11.,
         3., 12., 17., 26.,  4.,  9., 18., 13., 27.,  5.,  1., 32., 19.,
        10., 14.,  2.,  6., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 11., 31., 12., 16.,  7.,
        26.,  3., 17., 13.,  4.,  8., 32., 18.,  9., 14.,  5., 33., 27.,
        19., 10., 20.,  1.,  2.,  6., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 15., 11., 25., 28., 29.,  7., 30., 31., 32., 16.,
        26.,  3.,  4., 33., 17.,  8., 12., 13., 18.,  5.,  9.,  1.,  2.,
         6., 10., 14., 19., 20., 21., 22., 23., 24., 27., 34., 35., 38.],
       [ 0., 36., 37., 11., 25., 26., 28., 29., 30., 31., 32., 33., 38.,
         1., 15.,  2., 12., 16., 13., 14.,  7., 27.,  3., 17.,  4.,  8.,
        18., 19.,  5.,  9., 10.,  6., 20., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37.,  7., 11., 15., 25., 28., 29.,  3., 30., 16., 31.,
        12., 26., 17., 32., 18., 13.,  8.,  4.,  9., 33., 14.,  5., 19.,
        27.,  1.,  2.,  6., 10., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  1.,  3.,  7., 15., 25., 28., 29., 30., 31., 32.,
        11., 33.,  2., 38., 12.,  4.,  8., 26., 16., 13.,  5., 27., 17.,
         9.,  6., 18., 14., 19., 10., 20., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 15., 25., 26., 28., 29., 30., 16., 31., 32., 17.,
         7.,  1.,  3., 18.,  4., 27., 38.,  8., 19.,  9.,  5., 33.,  6.,
        10., 20.,  2., 11., 12., 13., 14., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 15., 16., 25., 28., 29., 30., 31., 26.,  7., 32.,
         3., 11., 12.,  8., 13., 17., 38.,  4., 27., 18., 33., 19.,  9.,
        14.,  5., 10., 20.,  1.,  2.,  6., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 11., 15., 25., 26., 28., 29., 30., 31., 16., 12.,
         7., 32., 17.,  3.,  8.,  4., 13.,  1.,  5.,  9., 18., 27., 14.,
        10., 19., 33., 34.,  6., 20.,  2., 21., 22., 23., 24., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 26., 28., 29., 16., 12., 30., 31.,
        17.,  7.,  3.,  4.,  8., 13.,  1.,  9.,  5., 18.,  6., 14., 27.,
        32., 10., 19., 38.,  2., 20., 21., 22., 23., 24., 33., 34., 35.],
       [ 0., 36., 37., 11., 28., 15., 25., 29., 30., 31., 16.,  7., 26.,
        12.,  3.,  4.,  8., 17.,  5.,  9., 10.,  6., 32.,  1.,  2., 13.,
        14., 18., 19., 20., 21., 22., 23., 24., 27., 33., 34., 35., 38.],
       [ 0., 36., 37.,  1.,  2.,  3.,  4.,  7., 11., 12., 15., 16., 25.,
        26., 27., 28., 29., 30., 31., 32., 33., 34., 35., 38.,  8.,  9.,
        17., 18.,  5., 10., 13.,  6., 19., 14., 20., 21., 22., 23., 24.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 31., 16., 26., 11., 12.,
         7., 17.,  3.,  8.,  4., 13., 32.,  9., 18.,  5., 14.,  6., 19.,
        33., 10.,  1., 27., 20.,  2., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  1.,  2.,  7., 15., 25., 26., 28., 29., 30., 31.,
        32., 16., 11., 33.,  3.,  8., 12., 38., 17., 27.,  4., 18.,  9.,
         5., 13., 19.,  6., 10., 14., 20., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37.,  1.,  7., 11., 15., 16., 25., 26., 28., 29., 30.,
        31., 32., 33., 12., 17.,  8., 13.,  2., 14., 27.,  3.,  9.,  4.,
        10., 18.,  5., 19.,  6., 20., 21., 22., 23., 38., 24., 34., 35.],
       [ 0., 36., 37.,  1.,  3.,  7., 15., 28., 29., 30., 31., 32., 38.,
        25., 16., 11., 12., 26., 33.,  2.,  8., 17.,  4., 27., 13., 18.,
         9., 14., 19., 10.,  5., 20.,  6., 21., 22., 23., 34., 24., 35.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30.,  7., 12., 31.,  3.,
        16., 26.,  4.,  8., 13., 17., 32., 18.,  1.,  5.,  9., 27., 19.,
        14.,  2.,  6., 10., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 15.,  7., 28., 25., 29., 30., 11., 31.,  3., 12.,
        16., 26., 13.,  4., 17., 32.,  8., 18., 33.,  9., 27., 14.,  5.,
        19.,  1.,  2.,  6., 10., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 31., 11.,  7.,  3., 12.,
        16., 26.,  8.,  4., 17., 13.,  9.,  5., 18., 27., 14., 19., 32.,
        10.,  6., 20.,  1.,  2., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 26.,  7., 16.,
        12.,  3., 17.,  4.,  8.,  9.,  5., 32., 18., 13., 10., 19., 27.,
         1.,  2.,  6., 14., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37.,  1.,  2., 11., 12., 15., 25., 26., 28., 29., 30.,
        31., 32., 33., 34., 35., 38., 27.,  7., 16.,  8., 13., 17.,  3.,
         4., 14., 18.,  9.,  5., 19., 10.,  6., 20., 21., 22., 23., 24.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 26., 32., 16.,
        12., 38.,  7.,  3., 13., 17., 33.,  8.,  4., 27., 18.,  9.,  5.,
        19., 34., 20., 10.,  6.,  1.,  2., 14., 21., 22., 23., 24., 35.],
       [ 0., 36., 37.,  1., 11., 12., 15., 25., 28., 29., 30., 31., 32.,
        38., 26., 16., 17.,  7., 18., 27., 13.,  3., 14., 19.,  8.,  4.,
         9., 33.,  5.,  6., 10., 20.,  2., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 15., 28., 29., 30., 25., 31., 11.,  7., 32., 12.,
         8., 16.,  3.,  1., 26., 17.,  4., 18., 13.,  9., 27.,  5., 10.,
        19., 14., 20.,  6., 21., 22.,  2., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 16., 25., 28., 29., 30., 31., 32.,  1.,
        26., 12.,  7., 33., 17., 38.,  8.,  3.,  4., 13.,  5., 18., 27.,
         9., 14., 19., 10.,  2.,  6., 20., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37.,  1., 15., 25., 28., 29., 30., 31., 32., 16., 11.,
        12., 38.,  7.,  8.,  3., 13., 26., 33.,  4., 17.,  9.,  5., 18.,
        19., 14., 27.,  2.,  6., 10., 20., 34., 21., 22., 23., 24., 35.],
       [ 0., 36., 37.,  1., 11., 15., 25., 28., 29., 30., 31., 32.,  3.,
        38.,  7., 16.,  8.,  4., 12., 26., 17.,  9., 27., 13., 18.,  5.,
        19., 20., 14.,  6., 10., 21., 33., 22.,  2., 23., 24., 34., 35.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 38., 32.,  1.,
        26., 16., 12.,  7.,  3., 27.,  8., 17., 13.,  4., 18., 19.,  5.,
         9., 14.,  2., 20.,  6., 10., 33., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37.,  1., 15., 25., 28., 11., 29., 30., 26., 16., 31.,
         3.,  7., 12., 17., 32.,  4., 18., 13.,  8.,  9.,  5., 27., 19.,
         2., 33., 10.,  6., 14., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 15., 25., 28., 29., 11., 30.,  7., 16., 26., 31.,
        12., 17.,  8.,  3.,  4., 13.,  9., 32., 18., 27., 10.,  5., 14.,
        19., 20.,  6., 21.,  1.,  2., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 31., 32., 33., 38.,  1.,
        26., 16., 27., 11., 12.,  7., 13.,  3.,  4., 17., 18.,  8., 19.,
         5.,  9., 14., 34., 20., 10.,  6., 21.,  2., 22., 23., 24., 35.],
       [ 0., 36., 37.,  7., 25., 28., 15., 29.,  3., 30., 11., 31., 16.,
        12., 26.,  4., 32.,  8., 17., 13., 18.,  9.,  5., 27., 19.,  1.,
         2.,  6., 10., 14., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37.,  7., 28., 15., 29., 30., 25., 11., 31.,  3., 12.,
        16., 26.,  8.,  4.,  5., 13.,  9., 17., 32., 18., 27.,  6., 19.,
        10., 14.,  1., 33., 20.,  2., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  7., 15., 25., 28., 29., 11., 30.,  3., 26., 16.,
        12., 31.,  4., 17., 13.,  8., 32., 27., 33., 18., 19.,  9.,  5.,
        14.,  6., 20., 10.,  1.,  2., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 16., 31.,  7.,  3.,
        26.,  4., 32., 17., 12.,  8., 18., 27.,  1.,  9.,  5., 19.,  2.,
         6., 10., 13., 14., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37.,  1.,  2., 15., 28., 29., 30., 31., 38., 32., 33.,
        25., 11., 26.,  7.,  8., 16.,  3., 12.,  9., 27.,  4., 17., 10.,
         5., 18., 13., 19., 14., 20.,  6., 21., 22., 34., 23., 24., 35.],
       [ 0., 36., 37.,  1.,  2., 11., 15., 25., 28., 29., 30., 31., 32.,
        33., 38., 26.,  7., 27., 16., 12.,  8.,  3., 17., 18., 19., 13.,
         9.,  4., 14., 10., 20.,  5.,  6., 21., 34., 22., 23., 24., 35.],
       [ 0., 36., 37.,  1., 11., 15., 25., 28., 29., 30., 38., 31., 16.,
        32., 12., 26., 33., 27., 34., 13., 17.,  7., 18.,  3., 14.,  4.,
         8.,  5., 19.,  9., 20.,  6., 10., 21., 22.,  2., 23., 24., 35.],
       [ 0., 36., 37.,  1., 15., 25., 28., 29., 38., 30., 16., 11., 31.,
        32., 26., 33.,  7.,  8.,  3.,  4., 12., 17., 13., 27.,  9., 18.,
        19.,  5., 14., 20., 21., 34.,  2., 10.,  6., 22., 23., 24., 35.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 31., 38., 32., 33., 26.,
        11.,  7., 16.,  3., 12.,  4.,  8., 17., 27., 18.,  5., 13.,  9.,
        19.,  1., 34., 10., 14.,  6., 20.,  2., 21., 22., 23., 24., 35.],
       [ 0., 36., 37.,  7., 11., 15., 25., 28., 29., 30., 31.,  8., 32.,
         3., 12.,  4., 26., 16., 17., 38., 13.,  9., 33., 18.,  5., 19.,
        27., 10.,  1.,  2.,  6., 14., 20., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 31., 32., 11., 12., 16.,
         7., 13., 26., 33.,  3.,  4.,  8., 17., 18., 19., 27.,  5.,  9.,
        38.,  1.,  6., 20., 14., 10., 21.,  2., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 31., 11.,  7., 32., 16.,
        12., 26.,  3.,  4.,  8., 13., 17., 18.,  1., 38.,  9.,  5., 27.,
        14., 19.,  2.,  6., 10., 20., 21., 22., 23., 24., 33., 34., 35.],
       [ 0., 36., 37., 15.,  7., 25., 28., 29., 11., 30., 31., 12.,  3.,
        16., 32., 26.,  4., 13.,  8., 17., 18.,  5.,  9., 27., 33., 19.,
        20.,  6., 14.,  1.,  2., 10., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  1., 15., 28., 29., 30., 31., 32., 33., 38., 34.,
        25.,  7., 26., 16.,  8., 27., 17.,  3., 11.,  4.,  9., 18., 19.,
        12., 20., 13.,  5.,  2., 10., 21.,  6., 35., 22., 14., 23., 24.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 31.,  7., 16., 11.,  3.,
        12., 17., 26.,  8., 13.,  4.,  1.,  9., 32.,  5., 14., 18., 27.,
        10., 19.,  2.,  6., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 15., 28., 29., 25., 30.,  7., 31., 26., 16., 17.,
         8., 11., 12.,  3., 32., 13.,  4., 18.,  5., 33.,  9., 27., 19.,
        14.,  1.,  6., 10., 20.,  2., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 16., 26., 11., 12.,  7.,
        31., 17.,  3., 13.,  8.,  4., 32., 14., 18., 33., 27.,  9.,  5.,
        19., 20., 21.,  1., 10.,  6.,  2., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  1., 25., 28., 29., 30., 31., 32., 26., 38., 15.,
        16., 11., 12., 33., 17., 13., 14., 27.,  7.,  2.,  8., 18.,  3.,
         4., 19.,  5.,  9., 34.,  6., 10., 20., 21., 35., 22., 23., 24.],
       [ 0., 36., 37.,  1., 15., 28., 29., 30., 31., 32., 33.,  2., 25.,
        16., 34.,  7.,  8.,  3.,  4., 11.,  5., 38., 12.,  9., 26., 17.,
        10., 18., 19., 20., 27., 21.,  6., 13., 14., 22., 23., 24., 35.],
       [ 0., 36., 37., 28., 29., 30., 31., 25., 15., 32., 11., 16., 12.,
        26.,  1.,  7.,  3.,  4.,  8., 17., 13., 18.,  5.,  9., 27., 14.,
        10., 19.,  6., 20.,  2., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37.,  1., 11., 15., 25., 26., 28., 29., 30., 38., 16.,
        31., 32., 33.,  7.,  2.,  3.,  8., 12.,  4., 17., 27.,  9., 13.,
        18.,  5., 10., 14.,  6., 19., 20., 34., 35., 21., 22., 23., 24.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30.,  7., 31., 26., 16.,
         3., 12., 17.,  8.,  4., 32.,  5.,  9., 33.,  1., 18.,  6., 10.,
        19., 34., 27., 20.,  2., 13., 14., 21., 22., 23., 24., 35., 38.],
       [ 0., 36., 37., 15., 25., 28., 29., 30.,  7., 31., 26., 11., 16.,
         3., 12., 13., 27., 17., 32., 18.,  8.,  4., 14., 19.,  9., 20.,
        33.,  5., 21., 10., 22.,  1.,  2.,  6., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  7., 15., 28., 29., 25., 30., 11.,  3., 31., 12.,
         4.,  8., 16.,  9., 32., 26., 13., 33., 17.,  5., 18., 27., 14.,
         1.,  2.,  6., 10., 19., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 15., 28., 25., 29., 30., 31., 11., 12., 16., 32.,
         7., 17., 13., 26.,  3.,  4.,  8., 18., 38.,  9., 27., 33., 19.,
         5.,  1., 14.,  6., 10., 20.,  2., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30.,  7.,  3., 16., 31.,
         4., 26., 12.,  8., 32.,  5., 17.,  9., 18., 13.,  6., 33., 27.,
         1.,  2., 10., 14., 19., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 15., 28., 29., 25., 16., 30., 17.,  7., 26., 11.,
        31., 12.,  3., 32., 13.,  4.,  8.,  5., 18.,  9., 27.,  1., 14.,
        33., 19.,  6., 10., 20.,  2., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 15., 28., 25., 29., 30., 11., 31., 12., 16., 32.,
        26.,  7., 17.,  3., 13.,  4.,  8., 33., 18., 38., 27., 19., 20.,
         5.,  1.,  9., 21., 14.,  2.,  6., 10., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 11., 28., 12., 15., 29., 25.,  7., 30., 31., 16.,
         8., 26.,  3., 32.,  4., 17., 13.,  9.,  1., 27., 18.,  5., 19.,
        33., 10., 14., 20.,  2.,  6., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 31., 32., 38., 11., 12.,
        16., 33.,  7., 26.,  3.,  8., 17., 13.,  4.,  5., 18., 27.,  9.,
         1., 14., 19.,  6., 10., 20., 21., 22., 34.,  2., 23., 24., 35.],
       [ 0., 36., 37., 11., 12., 15., 25., 28., 29., 30., 31., 16., 32.,
        26.,  7.,  1., 17., 13.,  8.,  3., 18.,  4., 38.,  5., 33., 27.,
         9., 19.,  6., 14.,  2., 34., 10., 20., 21., 22., 23., 24., 35.],
       [ 0., 36., 37., 15.,  1., 11., 25., 16., 28., 29.,  7., 30.,  8.,
        31., 26., 12.,  3., 17.,  4., 32., 13.,  9., 27., 18.,  5.,  2.,
         6., 10., 14., 19., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 11., 31., 26.,  7., 12.,
         3., 16.,  8.,  4., 17., 32.,  5.,  9., 18., 33.,  1., 13.,  2.,
         6., 10., 14., 19., 20., 21., 22., 23., 24., 27., 34., 35., 38.],
       [ 0., 36., 37.,  1., 15., 25., 26., 28., 29., 30., 31., 32., 38.,
        33.,  2., 16.,  3., 27.,  4., 34.,  7., 17., 11., 12., 18., 13.,
         8.,  9.,  5., 19., 14., 10., 20., 35.,  6., 21., 22., 23., 24.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 16., 31., 11.,  7., 12.,
         3., 26., 13.,  8., 17.,  4., 32.,  9., 18., 14.,  5., 27., 19.,
         1., 33., 10.,  6., 20.,  2., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31., 26., 16., 32.,
         7.,  1., 17.,  3., 12.,  4., 38., 33., 18., 13., 27.,  8., 34.,
         5., 19.,  9.,  2.,  6., 10., 14., 20., 21., 22., 23., 24., 35.],
       [ 0., 36., 37., 11., 12., 15., 16., 25., 28., 29., 30., 31., 38.,
        26., 17.,  1., 32.,  7.,  8.,  3., 13.,  4., 33., 18.,  5.,  9.,
        14., 27., 19.,  2.,  6., 34., 20., 10., 21., 22., 23., 24., 35.],
       [ 0., 36., 37., 15., 28., 29., 25., 11., 30., 31.,  7., 26., 12.,
        16.,  3.,  4., 17., 32., 18., 13., 27.,  8.,  5.,  9., 19., 10.,
         6.,  1.,  2., 14., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 15., 28., 29., 25., 30., 11., 31., 12.,  3.,  7.,
        16., 26., 17.,  4.,  8.,  1., 13., 18.,  5.,  9., 32., 27., 14.,
        33., 10.,  6., 19.,  2., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 15., 25., 28., 29., 30.,  7., 11., 12., 16., 31.,
        26., 17.,  3., 32.,  4., 13.,  8., 18.,  1.,  5.,  9., 27., 19.,
        33.,  6., 20.,  2., 10., 14., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 31.,  7., 11., 12.,  3.,
        16., 26.,  8.,  4., 17., 32., 13.,  1., 18., 27.,  5.,  9., 33.,
        19., 14., 10.,  2.,  6., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  1.,  2.,  3.,  4.,  5.,  7.,  8.,  9., 11., 12.,
        13., 15., 16., 17., 25., 26., 27., 28., 29., 30., 31., 32., 33.,
        34., 38., 35., 18.,  6., 19., 10., 20., 21., 22., 23., 14., 24.],
       [ 0., 36., 37.,  1., 11., 15., 25., 26., 28., 29., 30., 16., 31.,
         7.,  3., 12., 27.,  8.,  4., 17., 32., 38., 18., 33., 13.,  9.,
        19.,  5.,  2., 10.,  6., 34., 14., 20., 21., 22., 23., 24., 35.],
       [ 0., 36., 37., 15., 28., 25., 29., 30., 11., 31.,  7., 26., 12.,
         3., 16., 17.,  8.,  4., 13., 18., 32.,  9.,  5.,  1., 19., 14.,
        33., 10., 27., 20.,  6.,  2., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  1.,  2., 11., 12., 15., 25., 28., 29., 30., 31.,
        32., 33., 34., 38., 35., 26., 13., 27., 16.,  7., 17.,  3.,  8.,
         4.,  5.,  9., 14., 18.,  6., 19., 10., 20., 21., 22., 23., 24.],
       [ 0., 36., 37., 11., 12., 15., 25., 28., 29., 30., 16., 31.,  7.,
         3., 26.,  4., 13.,  1., 17.,  8., 18., 27., 38.,  5., 32.,  9.,
        19., 14., 33.,  6., 10., 20.,  2., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 31.,  7., 11., 12.,  3.,
        16.,  8.,  4., 26., 17., 32., 13.,  5.,  9., 18., 19., 27.,  6.,
         1., 10., 14., 20.,  2., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 15., 28., 29., 25., 30., 11., 12., 31.,  7., 26.,
        16.,  3., 32.,  4., 13., 17.,  8.,  5.,  9., 18.,  1., 27., 33.,
         6., 19., 14., 10., 20.,  2., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  1., 11., 12., 15., 25., 26., 28., 29., 30., 31.,
         7.,  3.,  8., 16., 32., 33., 13., 17., 27.,  4., 18.,  5.,  9.,
        14., 19., 38.,  6., 10.,  2., 20., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37.,  1., 11., 12., 15., 25., 28., 29., 30., 31., 38.,
        16., 26., 17.,  7., 32.,  3.,  8.,  4., 27., 18., 13., 19., 33.,
         9.,  5., 14., 34., 10.,  6., 20.,  2., 21., 22., 23., 24., 35.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 16., 11., 31.,  7.,  8.,
         3., 12.,  4., 26., 17.,  9.,  5., 32., 18., 13.,  1., 27., 19.,
         6., 10.,  2., 14., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30.,  7., 31., 26.,  3.,
        16.,  4., 12., 32.,  8., 17.,  5., 18., 33.,  9., 19., 27., 13.,
        38., 20.,  6.,  1.,  2., 10., 14., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 15., 28., 29., 25., 30., 26., 11.,  7., 16.,  3.,
        31., 12., 17.,  8.,  4., 13.,  1., 18., 32., 27.,  5.,  9., 33.,
        19., 14.,  6., 10.,  2., 20., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 12., 16., 31.,  7.,
        26.,  3., 17.,  8.,  4., 13.,  1., 32.,  5.,  9., 18., 33.,  6.,
        38., 27., 19., 10., 14.,  2., 20., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 11.,  7., 16., 26., 17.,
         3., 31., 12.,  1.,  4.,  8.,  5.,  9., 13., 32., 18., 19.,  2.,
         6., 10., 14., 20., 21., 22., 23., 24., 27., 33., 34., 35., 38.],
       [ 0., 36., 37., 11., 15., 25., 28., 29., 30., 31.,  7., 16., 32.,
        26., 12.,  3., 17.,  4.,  8., 38., 18.,  5., 33., 27., 19., 34.,
         9., 13., 20.,  1.,  2.,  6., 10., 14., 21., 22., 23., 24., 35.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 11., 26., 16.,  7., 12.,
        31.,  3., 17.,  4.,  8., 32.,  1., 18.,  5., 33., 19., 13.,  2.,
         6.,  9., 10., 14., 20., 21., 22., 23., 24., 27., 34., 35., 38.],
       [ 0., 36., 37.,  1., 15., 25., 28., 29., 30., 31., 32., 16., 11.,
         7.,  8.,  3., 26., 17., 12.,  4., 13., 18.,  9., 38.,  5., 27.,
        33., 10., 19., 14., 34.,  6.,  2., 20., 21., 22., 23., 24., 35.],
       [ 0., 36., 37., 25., 28., 29., 15., 30., 31., 26., 11., 12., 32.,
         7., 16., 13.,  1., 17., 18.,  3.,  8.,  4.,  5., 19., 27., 14.,
         9.,  6., 10., 33., 20., 21.,  2., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  3.,  7., 15., 25., 28., 29., 16., 30.,  8., 11.,
        12., 31., 13., 32., 26.,  1.,  4.,  9., 17., 33., 18., 27., 19.,
         5., 38., 10., 20., 14.,  2.,  6., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37.,  1., 15., 25., 28., 29., 30., 11., 31., 12., 32.,
        26.,  7., 13., 16.,  8., 17., 27., 18., 19.,  3.,  4., 14.,  9.,
         5., 10.,  6., 38., 33., 20., 21.,  2., 22., 23., 34., 24., 35.],
       [ 0., 36., 37.,  1.,  2., 25., 28., 29., 30., 31., 32., 38., 33.,
        11.,  7., 12., 15., 34.,  3., 26., 35., 16., 17.,  4., 18., 27.,
        13.,  5.,  8.,  9., 14.,  6., 19., 20., 10., 21., 22., 23., 24.],
       [ 0., 36., 37., 11., 12., 15., 25., 28., 29., 30., 31., 16.,  1.,
        26.,  7., 32., 17.,  3.,  4., 18.,  8., 27., 13.,  5., 14., 19.,
         9., 33., 38., 20.,  6., 10.,  2., 21., 22., 23., 24., 34., 35.],
       [ 0., 36., 37.,  3.,  4.,  7., 15., 25., 26., 28., 29., 30., 31.,
        32., 33.,  8., 34., 16., 17.,  1., 18., 11., 12., 27.,  9., 19.,
         2., 13.,  5., 35., 14., 20., 21., 10.,  6., 22., 23., 24., 38.],
       [ 0., 36., 37.,  1.,  7., 25., 28., 29., 30., 31., 38., 26., 32.,
        15., 11., 12.,  8.,  3., 33.,  4.,  9., 34., 35., 10., 16., 13.,
        27., 14.,  2.,  5., 17., 18.,  6., 19., 20., 21., 22., 23., 24.],
       [ 0., 36., 37.,  1., 15., 25., 26., 28., 29., 30., 31., 38., 32.,
        33., 16.,  2.,  7., 17.,  3., 11.,  8., 12.,  4., 27.,  9., 18.,
        34., 13.,  5., 19., 35., 10.,  6., 20., 14., 21., 22., 23., 24.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 31., 32.,  7., 33.,  3.,
        11., 12.,  8.,  4., 16., 26., 17., 13.,  5., 18.,  9., 27., 19.,
        14., 20., 10., 21.,  1., 34., 22.,  2.,  6., 23., 24., 35., 38.],
       [ 0., 36., 37.,  1.,  2., 15., 28., 29., 30., 31., 32., 33., 25.,
        38., 16.,  7., 26., 11.,  3., 34.,  8., 17., 12.,  4., 18., 35.,
         5.,  9., 27., 19., 13., 10., 20.,  6., 14., 21., 22., 23., 24.],
       [ 0., 36., 37.,  1., 11., 15., 25., 26., 28., 29., 30., 38., 31.,
        16., 32.,  7., 33., 17., 18., 12., 27., 19.,  3., 13.,  4.,  8.,
         5., 14.,  9., 34.,  6., 20., 10., 21.,  2., 22., 35., 23., 24.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 11., 16., 31., 12.,  7.,
         3., 26.,  4., 17., 13.,  8., 18., 27., 32.,  5., 19.,  9., 33.,
         1.,  6., 20.,  2., 10., 14., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 11., 12., 15., 25., 28., 29., 30., 31., 26., 16.,
        17.,  1., 13.,  7., 32.,  3., 18.,  4.,  8., 27.,  9.,  5., 19.,
        14.,  6., 10., 33., 38., 20., 21.,  2., 22., 23., 24., 34., 35.],
       [ 0., 36., 37., 15., 25., 28., 29., 11., 12., 30., 31.,  7., 13.,
         3., 26.,  8.,  4., 16.,  1., 17., 18.,  9.,  5., 14., 27., 19.,
        32., 10., 20.,  6.,  2., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 15., 28., 25., 29., 30.,  7., 11.,  3., 16., 31.,
        32., 26., 12., 13., 17.,  4.,  8.,  1., 18., 33., 14., 27.,  9.,
        19.,  5., 20., 10.,  2.,  6., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 16., 11.,  7., 26., 31.,
         3., 12.,  4.,  8., 17., 13., 32., 18.,  9., 27.,  1.,  2.,  5.,
         6., 10., 14., 19., 20., 21., 22., 23., 24., 33., 34., 35., 38.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 11., 12., 31.,  7., 16.,
         3.,  8., 26., 17., 13., 32.,  4., 18.,  9., 19., 27., 14., 33.,
         5., 20.,  6.,  1.,  2., 10., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37.,  7., 15., 25., 26., 27., 28., 29., 30., 31., 32.,
        33., 38., 34., 35., 16.,  1., 11., 17., 12.,  3.,  4.,  8., 18.,
         2., 13.,  5.,  9., 19., 10., 14., 20.,  6., 21., 22., 23., 24.],
       [ 0., 36., 37., 15., 28., 29., 25., 30., 16., 31., 11.,  7., 26.,
         3.,  8.,  4., 12., 17.,  1.,  9., 32., 13., 18.,  5., 14., 10.,
        19., 27.,  6., 20., 33.,  2., 21., 22., 23., 24., 34., 35., 38.],
       [ 0., 36., 37., 15., 25., 28., 29., 30., 31., 11., 12., 16., 32.,
         7.,  3., 26.,  4.,  1.,  8., 13., 17., 27., 38., 18., 19., 33.,
         5.,  9., 14., 20.,  6., 10.,  2., 21., 22., 23., 24., 34., 35.]])

# COMMAND ----------

action_pool = unit_ranking_clusters_200 if NUM_UNIT_ACTIONS == 200 else unit_ranking_clusters_50
spill_pool = spill_pool_3

combined_action_pool = np.concatenate([np.tile(action_pool, (spill_pool.shape[0], 1)), np.repeat(spill_pool, action_pool.shape[0], axis=0)], axis=1)

# COMMAND ----------

END_OF_EPISODE_PENALTY = -1
REPLAY_BUFFER_SIZE = int(50000)

MIN_SPILL = 0
MAX_SPILL = 300
NUM_TIME_STEPS = 36
TIME_STEP_DURATION = 30#720 // NUM_TIME_STEPS
NUM_CHANNELS = 21
NUM_FEATURES = NUM_CHANNELS * NUM_TIME_STEPS

ref_mw_per_cumec = [0.315016, 0.289573, 0.206178, 0.343658, 0.545116, 0.142931, 0.481758, 0.270711]

# COMMAND ----------

efficiency = np.array([
[1,1,1,1,1,1,1,1],
[0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0],
[0.7,0,0.470478029,0,0.546753331,0.87,0,0],
[0.7,0,0.522915771,0,0.59302968,0.87,0,0],
[0.7,0,0,0,0.631161946,0.87,0,0],
[0.7,0,0,0,0.662988218,0.87,0,0],
[0.7,0,0,0,0.689822482,0.872625655,0,0],
[0.7,0,0,0,0.712644537,0.87683709,0,0],
[0.7,0,0,0,0.732203192,0.879967708,0,0],
[0.7,0,0,0,0.749109371,0.881944902,0,0.88],
[0.84,0,0,0,0.613018594,0.882891429,0,0.88],
[0.84,0,0,0,0.631209304,0.882700746,0.79,0.88],
[0.848373322,0,0,0,0.647793526,0.881309155,0.79,0.88],
[0.859249142,0,0.776835025,0,0.663039339,0.878509128,0.803709883,0.88],
[0.86885708,0,0.793284043,0,0.67698043,0.874380724,0.810985059,0.88],
[0.879641596,0,0.808813439,0,0.689877345,0.872772555,0.817777694,0.88],
[0.886095725,0,0.821505447,0.83,0.701701759,0.874991289,0.85,0.88],
[0.892099633,0.839611476,0.830809296,0.869887208,0.712695513,0.877000442,0.85,0.88],
[0.90083691,0.845298606,0.834232746,0.877014743,0.722812078,0.878509267,0.85,0.88],
[0.906597346,0.853672918,0.693100234,0.88404411,0.732257524,0.879993197,0.85,0.88],
[0.911403569,0.862506441,0.706072103,0.890466114,0.74098147,0.881036573,0.845099464,0.88],
[0.915946681,0.868487609,0.718426196,0.896246297,0.749167386,0.881989699,0.843992243,0.88],
[0.917401205,0.872561338,0.729043011,0.903370019,0.869917838,0.882433725,0.839596657,0.88],
[0.912553254,0.873224523,0.73758469,0.911179947,0.874344131,0.882685892,0.830051522,0.88],
[0.871295786,0.871463012,0.739692791,0.918188885,0.878981527,0.882498127,0.811208351,0.88],
[0.874323841,0.866623407,0,0.925252475,0.884489333,0.882308273,0.786247432,0.88],
[0.87181062,0.85,0,0.930476008,0.890067496,0.88144883,0.791016033,0.88],
[0.862923731,0.790246968,0,0.933788692,0.894110261,0.88045789,0.795519213,0.88],
[0.8246465,0.795902714,0,0.933478825,0.89583284,0.878854395,0.799725699,0.88],
[0.83023838,0.801286237,0.785399156,0,0.896149648,0.879675263,0.803709883,0.88],
[0.835831981,0.807558546,0.793800985,0,0.895890955,0.880680617,0.807507732,0.88],
[0.839292697,0.813341598,0.801855253,0,0.892707974,0.881398672,0.811096703,0.88],
[0.842841257,0.817988997,0.809118304,0,0.88280887,0.881910456,0.81446426,0.88],
[0.847672101,0.822698828,0.816643898,0,0.870510636,0.88254825,0.817777694,0.88],
[0.852531536,0.827800378,0.822352793,0,0.827747768,0.882836089,0.821823531,0.88],
[0.857763366,0.832684949,0.827753812,0.863139255,0.833044754,0.883104322,0.824807763,0.881336042],
[0.862313877,0.836290598,0.831032449,0.866662468,0.836979526,0.883178262,0.827614088,0.883809431],
[0.865952708,0.839726108,0.833686764,0.87035869,0.840686966,0.883007966,0.830256314,0.885753123],
[0.87115413,0.845357321,0.828576968,0.874190179,0.844123796,0.882836642,0.832882981,0.887357322],
[0.875271094,0.84943259,0.823219367,0.877995496,0.847338473,0.881921754,0.83255443,0.888863175],
[0.879081384,0.852758332,0.769571589,0.881402083,0.849478537,0.881050323,0.830323023,0.890496599],
[0.882098128,0.855486202,0.774528352,0.885696818,0.850684654,0.880189437,0.824986151,0.891852232],
[0.884667641,0.859399704,0.776675202,0.887407413,0.851467803,0.879337384,0.814489886,0.893310338],
[0.886411959,0.863417015,0.778314557,0.890625492,0.850218931,0.877681566,0.845099464,0.894451765],
[0.888192876,0.866205205,0.773147863,0.899247111,0.844273733,0.876248243,0.844533712,0.895389619],
[0.889791403,0.868763641,0.793461751,0.902708124,0.836559792,0.874631123,0.843992243,0.896473748],
[0.889763846,0.87027285,0.79924243,0.905150477,0.808286104,0.872269594,0.841743862,0.897167386],
[0.888497273,0.871572778,0.804728565,0.907345253,0.869985933,0.86994127,0.839596657,0.897636813],
[0.888847497,0.871239734,0.810334862,0.909942652,0.872243156,0.86764376,0.834703239,0.897970029],
[0.887088802,0.870994311,0.814792769,0.911425922,0.874682919,0.864181158,0.830051522,0.898197221],
[0.882981698,0.869782216,0.819059123,0.915086965,0.866199823,0.860989428,0.816301997,0.898456315],
[0.874370259,0.868690313,0.823151606,0.918689761,0.868387746,0.857603028,0.818441954,0.898258935],
[0.859306041,0.866111098,0.82617376,0.922146725,0.883007518,0,0.820514737,0.898028799],
[0.85139443,0.863839595,0.829018397,0.925541711,0.884879114,0,0.822534953,0.89759591],
[0.843142793,0.833576282,0.831693473,0.928161991,0.887412025,0,0.824482392,0.896695181],
[0.845403798,0.835823453,0.830078167,0.930678171,0.890153892,0,0.826343077,0.896014937],
[0.848271761,0.839234103,0.828126069,0.932331178,0.892180267,0,0.828215767,0.895291231],
[0.850204554,0.842131419,0.825532493,0.933904303,0.894145823,0,0.830592812,0.895594292],
[0.852320458,0.844933739,0.81591837,0.933566147,0.894994537,0,0.832343246,0.895458784],
[0.854802451,0.847193698,0.806201817,0.933223814,0.895858426,0,0.834015524,0.895127044],
[0.857178332,0.849809013,0.79621848,0.879002147,0.896010539,0,0.835614422,0.89459563],
[0.859982396,0.852711137,0.801561448,0.880171692,0.896157224,0,0.83723241,0.893861593],
[0.862275112,0.855212329,0.805647268,0.885603214,0.896008317,0,0.836950639,0.893160195],
[0.864506495,0.856679898,0.809629306,0.888778083,0.89586258,0,0.836677588,0.892027333],
[0.866057566,0.859385305,0.813491251,0.891319387,0.894118582,0,0.835168267,0.890664876],
[0.867683717,0.862381771,0.817093683,0.888618244,0.892461063,0,0.833708537,0.889996626],
[0.868485233,0.864822363,0.820100388,0.89081791,0.887294995,0,0.845099464,0.890785032],
[0.869050047,0.866565235,0.822836012,0.896885822,0.882325185,0,0.844719518,0.891675264],
[0.86916531,0.868086295,0.825628506,0.898982251,0.876079045,0,0.844350602,0.892207009],
[0.869134142,0.869672376,0.828145236,0.90110702,0.870092727,0,0.843992243,0.892699657],
[0.868246216,0.870382124,0.828760131,0.90393082,0.867353012,0,0.842481732,0.893107095],
[0.867000658,0.87123756,0.828833661,0.906611718,0.868354405,0,0.841017227,0.893648497],
[0.863239116,0.871944967,0,0.909201804,0.870084077,0,0.839596657,0.893804189],
[0.859050325,0.871474704,0,0.91128946,0.871590783,0,0.836306609,0.893829136],
[0.854191803,0.8711607,0,0.913297765,0.869502663,0,0.83312671,0.89383579],
[0.85,0.870712959,0,0.914697211,0.869710147,0,0.830051522,0.89308793],
[0.85,0.869364873,0,0.916028653,0.868635096,0,0.828979055,0.892902444],
[0,0.867361673,0,0.916824012,0.878977071,0,0.830306041,0.892562589],
[0,0.86585454,0,0.919293625,0.872829329,0,0.831583788,0.892232646],
[0,0.863920873,0,0.921559932,0.874893475,0,0.832882981,0.892507917],
[0,0.862115443,0,0.923807131,0.876479448,0,0.834562607,0.892678687],
[0,0.860274869,0,0.926007649,0.88555527,0,0.835797575,0.89266679],
[0,0.85317167,0,0.927701511,0.886981164,0,0.836985914,0.892615961],
[0,0.85512904,0,0.929393374,0.888463452,0,0.8381302,0.892214211],
[0,0.856150009,0,0.931014462,0.890309242,0,0.839297928,0.891913218],
[0,0.858673277,0,0.932050296,0.891647167,0,0.839065238,0.891593136],
[0,0.860387412,0,0.933099217,0.892969042,0,0.838837902,0.89226476],
[0,0.862177915,0,0.934085792,0.89425241,0,0.838615737,0.892247162],
[0,0.863922253,0,0.93368045,0.894800778,0,0.837477506,0.892350849],
[0,0.865621632,0,0.933270237,0.895349608,0,0.845099464,0.89233153],
[0,0.86672562,0,0.932855154,0.895872822,0,0.844813451,0.892184963],
[0,0.86766833,0,0.897256702,0.895966583,0,0.844533712,0.891707258],
[0,0.868726419,0,0.901586195,0.896057749,0,0.844260041,0.891015888],
[0,0.869622434,0,0.903269977,0.896146392,0,0.843992243,0.890436161],
[0,0.870422512,0,0.904459947,0.896030223,0,0.842854963,0.88946799],
[0,0.871078867,0,0.905667773,0.895915221,0,0.841743862,0.888357772],
[0,0.871846333,0,0.90688942,0.895817381,0,0.840658044,0.886881598],
[0,0.872453856,0,0.908642054,0.894581622,0,0.839596657,0.884157235],
[0,0.87162279,0,0.910526487,0.893383562,0,0.837219192,0],
[0,0.870741109,0,0.912381815,0.892206393,0,0.837039746,0],
[0,0.869810925,0,0.914167001,0.888616715,0,0.836863858,0],
[0,0.86866058,0,0.915641478,0.885062221,0,0.839955335,0],
[0,0.867424652,0,0.91704933,0.881661891,0,0.841126761,0],
[0,0.865968924,0,0.918432835,0.877524626,0,0.842323927,0],
[0,0.864688636,0,0.918102103,0.876848689,0,0.842102795,0],
[0,0.863399753,0,0.919987876,0.880946577,0,0.841885872,0],
[0,0.860166721,0,0.921673807,0.882073152,0,0.841673038,0],
[0,0.857058094,0,0.923291096,0.877224837,0,0.841464178,0],
[0,0.85,0,0.92492838,0.87728598,0,0.840498767,0],
[0,0.85,0,0.926497051,0.885827432,0,0.84423442,0],
[0,0,0,0.927778929,0.88692103,0,0.843044548,0],
[0,0,0,0.928995056,0.887971251,0,0.841878814,0],
[0,0,0,0.930238474,0.889125014,0,0.835653412,0],
[0,0,0,0.931415692,0.890476631,0,0.835509676,0],
[0,0,0,0.932072005,0.891476705,0,0.838615838,0],
[0,0,0,0.932706322,0.892447038,0,0.835229656,0],
[0,0,0,0.933373993,0.893401463,0,0.841899824,0],
[0,0,0,0.933967782,0.894355861,0,0.841596452,0],
[0,0,0,0.933277647,0.894747659,0,0.841298307,0],
[0,0,0,0.932499391,0.895131715,0,0.842922574,0],
[0,0,0,0.931765225,0.895525275,0,0.842664942,0],
[0,0,0,0.930932056,0.895894847,0,0.842411618,0],
[0,0,0,0,0.895957575,0,0.842162496,0],
[0,0,0,0,0.896018717,0,0.848444025,0],
[0,0,0,0,0.896078304,0,0.848020136,0],
[0,0,0,0,0.896136367,0,0.851002471,0],
[0,0,0,0,0.896033314,0,0.850475122,0],
[0,0,0,0,0.895950128,0,0.849956523,0],
[0,0,0,0,0.895848028,0,0.834196411,0],
[0,0,0,0,0.895745349,0,0.838309887,0],
[0,0,0,0,0.894751497,0,0.837577122,0],
[0,0,0,0,0.893744215,0,0.838542312,0],
[0,0,0,0,0.892769941,0,0.842609779,0],
[0,0,0,0,0.891805838,0,0.838252845,0],
[0,0,0,0,0.888991496,0,0.842067212,0],
[0,0,0,0,0.886255979,0,0.841927753,0],
[0,0,0,0,0.883471828,0,0.84170745,0],
[0,0,0,0,0.88137985,0,0.841490407,0],
[0,0,0,0,0.886999573,0,0.841276553,0],
[0,0,0,0,0.887829327,0,0.845614122,0],
[0,0,0,0,0.888560286,0,0.849442028,0],
[0,0,0,0,0.889603324,0,0.849060347,0],
[0,0,0,0,0.890692616,0,0.844117406,0],
[0,0,0,0,0.891462422,0,0.852801631,0],
[0,0,0,0,0.892221358,0,0.85232461,0],
[0,0,0,0,0.89298776,0,0.841400015,0],
[0,0,0,0,0.893726014,0,0.851391322,0],
[0,0,0,0,0.894453907,0,0.854703713,0],
[0,0,0,0,0.894767045,0,0.854142314,0],
[0,0,0,0,0.895055811,0,0.858999357,0],
[0,0,0,0,0.895339476,0,0.841336045,0],
[0,0,0,0,0.895618119,0,0.842434403,0],
[0,0,0,0,0.895913414,0,0.840949181,0],
[0,0,0,0,0.895956558,0,0.846965283,0],
[0,0,0,0,0.89599867,0,0.846107337,0],
[0,0,0,0,0.896039765,0,0.845847852,0],
[0,0,0,0,0.896079857,0,0.845591787,0],
[0,0,0,0,0.896118962,0,0.85022961,0],
[0,0,0,0,0.896015272,0,0.849882689,0],
[0,0,0,0,0.895911365,0,0.843662112,0],
[0,0,0,0,0.895807234,0,0.854723587,0],
[0,0,0,0,0.89572757,0,0.854211148,0],
[0,0,0,0,0.895623462,0,0.853776186,0],
[0,0,0,0,0.894714696,0,0.853346899,0],
[0,0,0,0,0.893837426,0,0.859472588,0],
[0,0,0,0,0.892966298,0,0.857126666,0],
[0,0,0,0,0.892101156,0,0.856607818,0],
[0,0,0,0,0.89124185,0,0.856095691,0],
[0,0,0,0,0.888886551,0,0.855590155,0],
[0,0,0,0,0.886560904,0,0.861538762,0],
[0,0,0,0,0.884187178,0,0.860886344,0],
[0,0,0,0,0.881955388,0,0.860242396,0],
[0,0,0,0,0.880161874,0,0.859606753,0],
[0,0,0,0,0.885683497,0,0.863068825,0],
[0,0,0,0,0.886121005,0,0.862290354,0],
[0,0,0,0,0.890550462,0,0.86152201,0],
[0,0,0,0,0.890987875,0,0.860763596,0],
[0,0,0,0,0.891281672,0,0.86001492,0],
[0,0,0,0,0.891555506,0,0.858375165,0],
[0,0,0,0,0.891825317,0,0.854009064,0],
[0,0,0,0,0.892091155,0,0.85230591,0],
[0,0,0,0,0.892373942,0,0.850627939,0],
[0,0,0,0,0.892621767,0,0.848831539,0],
[0,0,0,0,0.892690345,0,0.847061906,0],
[0,0,0,0,0.892757878,0,0.845318445,0],
[0,0,0,0,0.89282438,0,0.843600579,0],
[0,0,0,0,0.892889863,0,0.841165138,0],
[0,0,0,0,0.892954339,0,0.838769135,0],
[0,0,0,0,0.892961841,0,0.836411618,0],
[0,0,0,0,0.892907561,0,0.834091669,0],
[0,0,0,0,0.892852675,0,0,0],
[0,0,0,0,0.892797183,0,0,0],
[0,0,0,0,0.892765075,0,0,0],
[0,0,0,0,0.892708804,0,0,0],
[0,0,0,0,0.892486515,0,0,0],
[0,0,0,0,0.891987382,0,0,0],
[0,0,0,0,0.891268326,0,0,0],
[0,0,0,0,0.890577391,0,0,0],
[0,0,0,0,0.889889562,0,0,0],
[0,0,0,0,0.88920476,0,0,0],
[0,0,0,0,0.888522907,0,0,0],
[0,0,0,0,0.887619755,0,0,0],
[0,0,0,0,0.886326583,0,0,0],
[0,0,0,0,0.887832902,0,0,0],
[0,0,0,0,0.88821048,0,0,0],
[0,0,0,0,0.88858374,0,0,0],
[0,0,0,0,0.888862833,0,0,0],
[0,0,0,0,0.889125091,0,0,0],
[0,0,0,0,0.889384079,0,0,0],
[0,0,0,0,0.889639831,0,0,0],
[0,0,0,0,0.889912177,0,0,0],
[0,0,0,0,0.890117998,0,0,0],
[0,0,0,0,0.890320458,0,0,0],
[0,0,0,0,0.890407052,0,0,0],
[0,0,0,0,0.890492667,0,0,0],
[0,0,0,0,0.890577315,0,0,0],
[0,0,0,0,0.890661006,0,0,0],
[0,0,0,0,0.89074375,0,0,0],
[0,0,0,0,0.890738508,0,0,0],
[0,0,0,0,0.890743815,0,0,0],
[0,0,0,0,0.890725331,0,0,0],
[0,0,0,0,0.890706094,0,0,0],
[0,0,0,0,0.890686105,0,0,0],
[0,0,0,0,0.890688177,0,0,0],
[0,0,0,0,0.890667078,0,0,0],
[0,0,0,0,0.890462581,0,0,0],
[0,0,0,0,0.890258315,0,0,0],
[0,0,0,0,0.88980464,0,0,0],
[0,0,0,0,0.889352827,0,0,0],
[0,0,0,0,0.888770547,0,0,0],
[0,0,0,0,0.888213648,0,0,0],
[0,0,0,0,0.887658218,0,0,0],
[0,0,0,0,0.887104209,0,0,0],
[0,0,0,0,0.886551579,0,0,0],
[0,0,0,0,0.886764775,0,0,0],
[0,0,0,0,0.887033459,0,0,0],
[0,0,0,0,0.887287636,0,0,0],
[0,0,0,0,0.887539089,0,0,0],
[0,0,0,0,0.88778784,0,0,0],
[0,0,0,0,0.888052668,0,0,0],
[0,0,0,0,0.888221076,0,0,0],
[0,0,0,0,0.888386681,0,0,0],
[0,0,0,0,0.888549514,0,0,0],
[0,0,0,0,0.888650771,0,0,0],
[0,0,0,0,0.888751131,0,0,0],
[0,0,0,0,0.888850604,0,0,0],
[0,0,0,0,0.888949196,0,0,0],
[0,0,0,0,0.889046916,0,0,0],
[0,0,0,0,0.88905567,0,0,0],
[0,0,0,0,0.889063619,0,0,0],
[0,0,0,0,0.889070764,0,0,0],
[0,0,0,0,0.889098449,0,0,0],
[0,0,0,0,0.889104351,0,0,0],
[0,0,0,0,0.889086731,0,0,0],
[0,0,0,0,0.889067768,0,0,0],
[0,0,0,0,0.889047476,0,0,0],
[0,0,0,0,0.888850115,0,0,0],
[0,0,0,0,0.888671459,0,0,0],
[0,0,0,0,0.888474715,0,0,0],
[0,0,0,0,0.887984905,0,0,0],
[0,0,0,0,0.88753426,0,0,0],
[0,0,0,0,0.887104232,0,0,0],
[0,0,0,0,0.886627196,0,0,0],
[0,0,0,0,0.886173446,0,0,0],
[0,0,0,0,0.885720211,0,0,0],
[0,0,0,0,0.885793398,0,0,0],
[0,0,0,0,0.886040366,0,0,0],
[0,0,0,0,0.886285033,0,0,0],
[0,0,0,0,0.886545176,0,0,0],
[0,0,0,0,0.886680962,0,0,0],
[0,0,0,0,0.88683455,0,0,0],
[0,0,0,0,0.886966256,0,0,0],
[0,0,0,0,0.887095736,0,0,0],
[0,0,0,0,0.887210131,0,0,0],
[0,0,0,0,0.887323707,0,0,0],
[0,0,0,0,0.887436472,0,0,0],
[0,0,0,0,0.887548433,0,0,0],
[0,0,0,0,0.887659594,0,0,0],
[0,0,0,0,0.887692067,0,0,0],
[0,0,0,0,0.88772373,0,0,0],
[0,0,0,0,0.887754586,0,0,0],
[0,0,0,0,0.887804836,0,0,0],
[0,0,0,0,0.88783441,0,0,0],
[0,0,0,0,0.887803352,0,0,0],
[0,0,0,0,0.887771245,0,0,0],
[0,0,0,0,0.887738105,0,0,0],
[0,0,0,0,0.887703944,0,0,0],
[0,0,0,0,0.887510117,0,0,0],
[0,0,0,0,0.887316313,0,0,0],
[0,0,0,0,0.887122537,0,0,0],
[0,0,0,0,0.886928795,0,0,0],
[0,0,0,0,0.886521946,0,0,0],
[0,0,0,0,0.886136266,0,0,0],
[0,0,0,0,0.885750622,0,0,0],
[0,0,0,0,0.885364994,0,0,0],
[0,0,0,0,0.884979579,0,0,0],
[0,0,0,0,0.885219851,0,0,0],
[0,0,0,0,0.885457877,0,0,0],
[0,0,0,0,0.885585355,0,0,0],
[0,0,0,0,0.885712064,0,0,0],
[0,0,0,0,0.885838008,0,0,0],
[0,0,0,0,0.885963192,0,0,0],
[0,0,0,0,0.886087623,0,0,0],
[0,0,0,0,0.886197612,0,0,0],
[0,0,0,0,0.886305811,0,0,0],
[0,0,0,0,0.886412239,0,0,0],
[0,0,0,0,0.88652016,0,0,0],
[0,0,0,0,0.886643362,0,0,0],
[0,0,0,0,0.886696178,0,0,0],
[0,0,0,0,0.886748205,0,0,0],
[0,0,0,0,0.886799446,0,0,0],
[0,0,0,0,0.886869088,0,0,0],
[0,0,0,0,0.886919062,0,0,0],
[0,0,0,0,0.886879369,0,0,0],
[0,0,0,0,0.886838883,0,0,0],
[0,0,0,0,0.886797616,0,0,0],
[0,0,0,0,0.886755581,0,0,0],
[0,0,0,0,0.88671279,0,0,0],
[0,0,0,0,0.886497881,0,0,0],
[0,0,0,0,0.886307946,0,0,0],
[0,0,0,0,0.886118052,0,0,0],
[0,0,0,0,0.885928204,0,0,0],
[0,0,0,0,0.885738409,0,0,0],
[0,0,0,0,0.885399919,0,0,0],
[0,0,0,0,0.885081198,0,0,0],
[0,0,0,0,0.884762147,0,0,0],
[0,0,0,0,0.884442752,0,0,0],
[0,0,0,0,0.884122997,0,0,0],
[0,0,0,0,0.88373144,0,0,0],
[0,0,0,0,0.883312659,0,0,0],
[0,0,0,0,0.882921611,0,0,0],
[0,0,0,0,0.882531166,0,0,0],
[0,0,0,0,0.882141173,0,0,0],
[0,0,0,0,0.881404987,0,0,0],
[0,0,0,0,0.880705655,0,0,0],
[0,0,0,0,0.879977885,0,0,0],
[0,0,0,0,0.879289588,0,0,0],
[0,0,0,0,0.878570082,0,0,0],
[0,0,0,0,0.877892614,0,0,0],
[0,0,0,0,0.877181225,0,0,0],
[0,0,0,0,0.876514386,0,0,0],
[0,0,0,0,0.875810973,0,0,0],
[0,0,0,0,0.87512196,0,0,0],
[0,0,0,0,0.874221619,0,0,0],
[0,0,0,0,0.873286577,0,0,0],
[0,0,0,0,0.872341484,0,0,0],
[0,0,0,0,0.871411867,0,0,0],
[0,0,0,0,0.870477604,0,0,0],
[0,0,0,0,0.86951886,0,0,0],
[0,0,0,0,0.868633171,0,0,0],
[0,0,0,0,0.867705594,0,0,0],
[0,0,0,0,0.866803446,0,0,0],
[0,0,0,0,0.865938786,0,0,0],
[0,0,0,0,0.864912887,0,0,0],
[0,0,0,0,0.86389633,0,0,0],
[0,0,0,0,0.862889006,0,0,0],
[0,0,0,0,0.86189081,0,0,0],
[0,0,0,0,0.86082521,0,0,0]
], dtype=np.float32)

efficiency

# COMMAND ----------

def index_of_unit(unit):
  return np.argmax(unit[..., np.newaxis] < np.array([3, 7, 11, 15, 25, 28, 32, 36, 39]), axis=-1)

def mw_adjustment(cumulative_station_order, scenario, station_capacities):
  mw_order_for_scenario = cumulative_station_order * scenario

  station_cap_unique, cap_indices = np.unique(station_capacities, return_inverse=True, axis=0)

  res = np.sum(
    np.maximum(np.minimum(min_station_mw[np.newaxis, :], station_cap_unique)[:, np.newaxis, np.newaxis, :] - mw_order_for_scenario, 0)
    - np.maximum(mw_order_for_scenario - station_cap_unique[:, np.newaxis, np.newaxis, :], 0)
    , axis=-1)

  return res[cap_indices, :, :]


def mw_to_units_on(station_mw, station_capacities):
  arapuni_mapping = np.array([[1., 0., 0., 0., 0., 0., 0., 0.],
                              [0., 1., 0., 0., 0., 0., 0., 0.],
                              [0., 0., 1., 0., 0., 0., 0., 0.],
                              [0., 0., 0., 1., 0., 0., 0., 0.],
                              [0., 0., 0., 0., 1., 0., 0., 0.],
                              [0., 0., 0., 0., 0., 1., 0., 0.],
                              [0., 0., 0., 0., 0., 0., 1., 0.],
                              [0., 0., 0., 0., 0., 0., 1., 0.],
                              [0., 0., 0., 0., 0., 0., 0., 1.]])
  
  station_mw_stage = np.matmul(station_mw, arapuni_mapping.T)
  station_mw_stage[6] = min(station_mw_stage[6], 104)
  station_mw_stage[7] = station_capacities[6] - station_mw_stage[6]
  station_mw = station_mw_stage

  num_units_on = np.ceil(station_mw / max_unit_mw)
  station_first_unit = np.array([0, 3, 7, 11, 15, 25, 28, 32, 36])

  unit_list = []
  for i in range(39):
    station = np.argmax(i < np.array([3, 7, 11, 15, 25, 28, 32, 36, 39]))
    
    if (i - station_first_unit[station] + 1) <= num_units_on[station]:
      unit_list.append(i)

  return np.array(unit_list)

def adjust_unit_order_current_units_first_on(options, current_station_mw, station_capacities):
  current_units_on = mw_to_units_on(current_station_mw, station_capacities)

  num_units_on = current_units_on.shape[0]

  units_on = np.reshape(options[np.isin(options, current_units_on)], (options.shape[0], num_units_on))
  units_off = np.reshape(options[~np.isin(options, current_units_on)], (options.shape[0], 39-num_units_on))
  
  return np.concatenate((units_on, units_off), axis=-1)


def unit_order_to_mw(station_order, river_mw, station_capacities):
  cumulative_station_order = np.cumsum((station_order[..., np.newaxis] == np.arange(9)), axis=-2)

  num_options = station_order.shape[0]
  
  min_unit_mw_order_arr = (np.cumsum(min_unit_mw[station_order], axis=-1) 
    + mw_adjustment(cumulative_station_order, min_unit_mw, station_capacities))
  efficient_min_mw_order_arr = (np.cumsum(efficient_min_unit[station_order], axis=-1) 
    + mw_adjustment(cumulative_station_order, efficient_min_unit, station_capacities))
  efficient_max_mw_order_arr = (np.cumsum(efficient_max_unit[station_order], axis=-1) 
    + mw_adjustment(cumulative_station_order, efficient_max_unit, station_capacities))
  max_unit_mw_order_arr = (np.cumsum(max_unit_mw[station_order], axis=-1) 
    + mw_adjustment(cumulative_station_order, max_unit_mw, station_capacities))
  
  res = np.zeros((num_options, river_mw.shape[0], 9))

  cumulative_station_order_feasible = cumulative_station_order.copy()
  station_order_feasible = station_order.copy()

  for r in range(river_mw.shape[0]):
    min_unit_mw_order = min_unit_mw_order_arr[r, ...]
    efficient_min_mw_order = efficient_min_mw_order_arr[r, ...]
    efficient_max_mw_order = efficient_max_mw_order_arr[r, ...]
    max_unit_mw_order = max_unit_mw_order_arr[r, ...]

    station_capacities_at_time = station_capacities[r, ...]

    is_above_min = (river_mw[r] >= min_unit_mw_order)
    is_above_eff_min = (river_mw[r] >= efficient_min_mw_order)
    is_below_eff_max = (river_mw[r] <= efficient_max_mw_order)
    is_below_max = (river_mw[r] <= max_unit_mw_order)

    is_efficient = (is_above_eff_min & is_below_eff_max)
    is_below_efficient = (is_above_min & is_below_eff_max)
    is_above_efficient = (is_above_eff_min & is_below_max)

    mw_lower_bound = np.zeros((num_options, 9))
    mw_upper_bound = np.zeros((num_options, 9))
    num_units = np.zeros((num_options, ), dtype=int) - 1
    chosen_unit_order = np.zeros(efficient_min_mw_order.shape, dtype=int) - 1

    mw_lower_bound[np.any(is_below_efficient, axis=1), :] = min_unit_mw
    mw_lower_bound[np.any(is_above_efficient, axis=1), :] = efficient_max_unit
    mw_lower_bound[np.any(is_efficient, axis=1), :] = efficient_min_unit
    
    mw_upper_bound[np.any(is_below_efficient, axis=1), :] = efficient_min_unit
    mw_upper_bound[np.any(is_above_efficient, axis=1), :] = max_unit_mw
    mw_upper_bound[np.any(is_efficient, axis=1), :] = efficient_max_unit

    num_units[np.any(is_below_efficient, axis=1)] = np.argmax(is_below_efficient, axis=1)[np.any(is_below_efficient, axis=1)]
    num_units[np.any(is_above_efficient, axis=1)] = np.argmax(is_above_efficient, axis=1)[np.any(is_above_efficient, axis=1)]
    num_units[np.any(is_efficient, axis=1)] = np.argmax(is_efficient, axis=1)[np.any(is_efficient, axis=1)]

    chosen_unit_order[np.any(is_below_efficient, axis=1), :] = min_unit_mw_order[np.any(is_below_efficient, axis=1), :]
    chosen_unit_order[np.any(is_above_efficient, axis=1), :] = efficient_max_mw_order[np.any(is_above_efficient, axis=1), :]
    chosen_unit_order[np.any(is_efficient, axis=1), :] = efficient_min_mw_order[np.any(is_efficient, axis=1), :]

    feasible = np.all(mw_lower_bound > 0, axis=1) & np.all(mw_upper_bound > 0, axis=1) & (num_units >= 0) & np.all(chosen_unit_order >= 0, axis=1)
    first_feasible_index = np.argmax(feasible)

    #copy feasible action for rare case of infeasibilities
    mw_lower_bound[~feasible, :] = mw_lower_bound[first_feasible_index, :]
    mw_upper_bound[~feasible, :] = mw_upper_bound[first_feasible_index, :]
    num_units[~feasible] = num_units[first_feasible_index]
    chosen_unit_order[~feasible, :] = chosen_unit_order[first_feasible_index, :]
    cumulative_station_order_feasible[~feasible, :] = cumulative_station_order[first_feasible_index, :]
    station_order_feasible[~feasible, :] = station_order[first_feasible_index, :]

    assert np.all(mw_lower_bound > 0), ('Error: cannot make river mw of ' + str(river_mw[r]), station_capacities_at_time)
    assert np.all(mw_upper_bound > 0), ('Error: cannot make river mw of ' + str(river_mw[r]), station_capacities_at_time)
    assert np.all(num_units >= 0), ('Error: cannot make river mw of ' + str(river_mw[r]), station_capacities_at_time)
    assert np.all(chosen_unit_order >= 0), ('Error: cannot make river mw of ' + str(river_mw[r]), station_capacities_at_time)

    #find units
    station_order_units_in_use = station_order_feasible.copy()
    for opt in range(num_options):
      station_order_units_in_use[opt, (num_units[opt]+1):] = -1
    units_by_station = np.sum(np.arange(9)[np.newaxis, np.newaxis, :] == station_order_units_in_use[:, :, np.newaxis], axis=1)
    baseline_mw = np.minimum(np.maximum(mw_lower_bound * units_by_station, np.minimum(min_station_mw, station_capacities_at_time)), station_capacities_at_time)

    #find unit with marginal mw
    mw_diff_by_unit = mw_upper_bound - mw_lower_bound
    station_mw_remaining = station_capacities_at_time - baseline_mw

    marginal_mw_to_assign = river_mw[r] - chosen_unit_order[np.arange(num_options), num_units[np.arange(num_options)]]
    marginal_mw_order = np.minimum(cumulative_station_order_feasible * mw_diff_by_unit[:, np.newaxis, :], station_mw_remaining[:, np.newaxis, :])
    marginal_unit_index = np.argmax(np.sum(marginal_mw_order, axis=-1) >= marginal_mw_to_assign[:, np.newaxis], axis=-1)

    #assign mw
    mw_to_add = marginal_mw_order[np.arange(num_options), marginal_unit_index-1, :]
    mw_to_add[marginal_unit_index == 0] = np.zeros((9,))
    total_mw_to_add = np.sum(mw_to_add, axis=1)

    mw_out = np.minimum(np.maximum(mw_lower_bound * units_by_station, np.minimum(min_station_mw, station_capacities_at_time)), station_capacities_at_time) + mw_to_add

    for opt in range(num_options):
      mw_out[opt, station_order_feasible[opt, marginal_unit_index[opt]]] += (marginal_mw_to_assign[opt] - total_mw_to_add[opt])

    res[:, r, :] = mw_out

  return res

river_mw_lookup_range = np.arange(np.sum(min_station_mw), np.sum(max_mw))

arapuni_mapping = np.array([[1., 0., 0., 0., 0., 0., 0., 0.],
                              [0., 1., 0., 0., 0., 0., 0., 0.],
                              [0., 0., 1., 0., 0., 0., 0., 0.],
                              [0., 0., 0., 1., 0., 0., 0., 0.],
                              [0., 0., 0., 0., 1., 0., 0., 0.],
                              [0., 0., 0., 0., 0., 1., 0., 0.],
                              [0., 0., 0., 0., 0., 0., 1., 0.],
                              [0., 0., 0., 0., 0., 0., 1., 0.],
                              [0., 0., 0., 0., 0., 0., 0., 1.]])

lookup_quick_unit_order_to_mw = np.matmul(unit_order_to_mw(
  index_of_unit(unit_ranking_clusters_200), 
  river_mw_lookup_range, 
  np.tile(np.array([[ 78., 112.,  74., 116., 352.,  54., 104., 88., 96.]]), (river_mw_lookup_range.shape[0], 1))), arapuni_mapping)

def quick_unit_order_to_mw(river_mw_arr):
  return lookup_quick_unit_order_to_mw[:, river_mw_arr - np.sum(min_station_mw), :]


def get_mw_options(river_mw_arr, max_mw_arr, current_station_mw, options=unit_ranking_clusters_200):
  arapuni_mapping = np.array([[1., 0., 0., 0., 0., 0., 0., 0.],
                              [0., 1., 0., 0., 0., 0., 0., 0.],
                              [0., 0., 1., 0., 0., 0., 0., 0.],
                              [0., 0., 0., 1., 0., 0., 0., 0.],
                              [0., 0., 0., 0., 1., 0., 0., 0.],
                              [0., 0., 0., 0., 0., 1., 0., 0.],
                              [0., 0., 0., 0., 0., 0., 1., 0.],
                              [0., 0., 0., 0., 0., 0., 1., 0.],
                              [0., 0., 0., 0., 0., 0., 0., 1.]])
  
  station_capacities_stage = np.matmul(max_mw_arr, arapuni_mapping.T)
  station_capacities_stage[:, 6] = np.minimum(station_capacities_stage[:, 6], 104)
  station_capacities_stage[:, 7] = max_mw_arr[:, 6] - station_capacities_stage[:, 6]

  station_capacities = station_capacities_stage
  
  unit_order = index_of_unit(options)

  river_mw_arr = np.clip(river_mw_arr, np.sum(np.minimum(min_station_mw[np.newaxis, :], station_capacities), axis=-1), np.sum(station_capacities, axis=-1))

  #try quick evaluation that ignores station outages
  res = quick_unit_order_to_mw(river_mw_arr.astype(int))

  #find indexes that breach station capacities
  breach_options = np.any(np.any(res > max_mw_arr, axis=-1), axis=1)

  if np.any(breach_options):
    res[breach_options, :, :] = np.matmul(unit_order_to_mw(unit_order[breach_options, :], river_mw_arr, station_capacities), arapuni_mapping)

  return res

# COMMAND ----------

def get_new_mw_flows_spills(current_mw, target_mw, spill_flows, hwls, action_pool, current_max_mw, no_feasible_actions=False, new_mw=None, log=0):
  if new_mw is None:
    if no_feasible_actions:
      new_mw = find_feasible_mw(current_mw, target_mw - np.sum(current_mw), current_max_mw)[np.newaxis, :]
    else:
      new_mw = np.tile(get_mw_options(target_mw.astype(int), current_max_mw, current_mw, action_pool[:200, :39]), (3, 1, 1)) #TODO make this work for any action set

  head = hwls - get_station_twls(np.clip(new_mw, 0, 360), spill_flows[1:], hwls)

  new_penstock_flows = new_mw * 1000 / (np.maximum(efficiency[np.clip(new_mw, 0, 360).astype(int), np.arange(8)[np.newaxis, :]], 1e-4) * head * 9.81)

  spill_max_allowed = np.concatenate((np.ones((new_mw.shape[0], new_mw.shape[1], 1)), (new_mw == current_max_mw[np.newaxis, :, :])), axis=-1) * MAX_SPILL
  
  new_spill = np.maximum(
      np.minimum(
        spill_flows[np.newaxis, np.newaxis, :] + action_pool[:, np.newaxis, 39:48], 
        spill_max_allowed
        ),
      np.maximum(
        MIN_SPILL, 
        min_flow[np.newaxis, np.newaxis, :] - np.concatenate([np.zeros((new_penstock_flows.shape[0], new_penstock_flows.shape[1], 1), dtype=np.float32), new_penstock_flows], axis=-1)
        )
      )
    
  new_flows = np.concatenate([np.zeros((new_penstock_flows.shape[0], new_penstock_flows.shape[1], 1)), new_penstock_flows], axis=-1) + new_spill

  return new_mw, new_flows, new_spill

# COMMAND ----------

def flow_diff_after_action(current_mw, target_mw, spill_flows, tribs, hwls, action_pool, current_max_mw):#mw_change, flows, tcg_flow, tribs):
  _, new_flows, _ = get_new_mw_flows_spills(current_mw, np.array([target_mw]), spill_flows, hwls, action_pool, current_max_mw)
  
  flow_diff_filling = np.maximum(new_flows[..., :-1] + tribs - new_flows[..., 1:], 1e-6)
  flow_diff_emptying = np.maximum(new_flows[..., 1:] - new_flows[..., :-1] - tribs, 1e-6)

  return np.concatenate([flow_diff_filling, flow_diff_emptying], axis=-1).astype(np.float32)
  
def filling_and_close_after_action(current_mw, target_mw, spill_flows, tribs, hwls, action_pool, current_max_mw):#mw_change, flows, tcg_flow, tribs, hwls):
  _, new_flows, _ = get_new_mw_flows_spills(current_mw, np.array([target_mw]), spill_flows, hwls, action_pool, current_max_mw)

  distance_to_max = np.log(np.maximum(max_hwl - hwls, 1e-6))
  flow_diff_filling = np.maximum(new_flows[..., :-1] + tribs - new_flows[..., 1:], 1e-6)

  return np.minimum(distance_to_max * flow_diff_filling, 0)

def emptying_and_close_after_action(current_mw, target_mw, spill_flows, tribs, hwls, action_pool, current_max_mw):#mw_change, flows, tcg_flow, tribs, hwls):
  _, new_flows, _ = get_new_mw_flows_spills(current_mw, np.array([target_mw]), spill_flows, hwls, action_pool, current_max_mw)

  distance_to_min = np.log(np.maximum(hwls - min_hwl, 1e-6))
  flow_diff_emptying = np.maximum(new_flows[..., 1:] - new_flows[..., :-1] - tribs, 1e-6)

  return np.minimum(distance_to_min * flow_diff_emptying, 0)


flow_diff_after_action(np.ones((8,)) * 100, 820, np.zeros((9,)), np.ones((8,))*5, max_hwl, combined_action_pool, np.array([max_mw, max_mw]))[0, :]

# COMMAND ----------

def lost_mw_after_action(current_mw, target_mw, spill_flows, hwls, action_pool, current_max_mw):
  new_mw, flow_after_action, spill_after_action = get_new_mw_flows_spills(current_mw, target_mw, spill_flows, hwls, action_pool, current_max_mw)
  
  lost_mw = flow_after_action[..., 1:] * mw_per_cumec_benchmark - new_mw

  return np.sum(lost_mw, axis=-1)

lost_mw_after_action(np.array([24, 0, 70, 0, 0, 0, 0, 43.0], dtype=np.float32), np.array([71]), np.zeros((9,), dtype=np.float32), max_hwl, combined_action_pool, np.array([max_mw, max_mw]))[1]

# COMMAND ----------

max_hwl = max_hwl.astype(float)
travel_times = travel_times.astype(int)
fill_factors = fill_factors.astype(float)

# COMMAND ----------

def total_potential_energy(hwls, flow_history, starting_HWL_fraction=None):
    """
    Calculates the total potential energy available in the river system for a given time period (TP).

    This function computes the potential energy generated per cubic meter of water, accounts for water volume
    in reservoirs and transitions, and calculates the total potential energy available.

    Args:
        starting_HWL_fraction (float): The start HWL fraction to use for potential energy calculation. If None,
                                        use actual HWL.

    Returns:
        The total potential energy available in the system.
    """
    # water_potential is the expected energy generated per cubic metre of water if it flows from the current
    # reservoir through all downstream stations, so it is a cumulative sum of reference_mw_per_cumec.
    # Note that MW/cumec is the same as MJ/m^3
    water_potential = np.array([mw_per_cumec_benchmark[i:].sum() for i in range(8)])
    # Fill factors are flow rates required to raise water level by a metre if constant flow for 24 hours.
    # Multiplying by seconds in a day converts these to areas in square metres.
    # Multiplying by height above minimum HWL gives volume of water in m^3
    reservoir_area = fill_factors * 24.0 * 3600.0
    
    if starting_HWL_fraction is None:
        HWL = hwls
        # volume in transition depends on distance to upstream station
        volume_in_transition = np.concatenate(
            (np.zeros((flow_history.shape[0], 1)), 
             np.swapaxes(np.array([(flow_history[:, -travel_times[st]:, st-1]).sum(axis=1) * 60.0 for st in range(1, 8)]),0,1)), 
            axis=-1
            )
    else:
        HWL = min_hwl + starting_HWL_fraction * (max_hwl - min_hwl)
        volume_in_transition = 0.0

    depth = HWL - min_hwl
    # (area) * (water depth) = (water volume)
    volume_in_reservoirs = reservoir_area * depth
    total_volume = volume_in_reservoirs + volume_in_transition

    return (total_volume * water_potential).sum(axis=-1) / 94860202.15367399

# total_potential_energy(np.tile(min_hwl, (4,1)), np.tile(setpoints_arr[np.newaxis, (20000-720):20000, 26:34], (4,1,1)), starting_HWL_fraction=None)

# COMMAND ----------

storage_res = np.zeros((setpoints_arr.shape[0]//720 + 1,))

for i in range(720, setpoints_arr.shape[0], 720):
  storage_res[i//720] = total_potential_energy(setpoints_arr[i, 18:26], setpoints_arr[np.newaxis, (i-720):i, 26:34], starting_HWL_fraction=None)

np.percentile(storage_res, [1, 5, 50, 95, 99])

# COMMAND ----------

# def calculate_new_hwl(flow_history, new_flows, hwls, tribs, minutes=120): #(action, time step, station)
#   upstream_total_flow = np.zeros((new_flows.shape[0], minutes, 8))

#   for st in range(8):
#     upstream_total_flow[:, :travel_times[st], st] = (flow_history[720-travel_times[st]:, st] + tribs[720-travel_times[st]:, st])[np.newaxis, :]
#     upstream_total_flow[:, travel_times[st]:, st] = new_flows[:, np.newaxis, st]

#   change_in_hwl = (np.cumsum((upstream_total_flow - new_flows[:, np.newaxis, 1:]) / (1440 * fill_factors), axis=1))

#   return hwls + change_in_hwl

# baseline = calculate_new_hwl(flow_hist, new_f, max_hwl, trib_fl, 900)

@njit
def calculate_new_hwl_new(flow_history, new_flows, hwls, tribs, minutes, upstream_total_flow, change_in_hwl): #(action, time step, station)
  # upstream_total_flow = np.zeros((new_flows.shape[0], minutes, 8))
  n_i = new_flows.shape[0]
  n_j = minutes
  n_k = 8

  step_size = TIME_STEP_DURATION
  
  for i in range(n_i):
    for k in range(n_k):
      for j in range(min(travel_times[k], n_j)):
        upstream_total_flow[i, j, k] = (flow_history[720 - travel_times[k] + j, k] + tribs[720 - travel_times[k] + j, k])
      for j in range(travel_times[k], n_j):
        upstream_total_flow[i, j, k] = new_flows[i, (j - travel_times[k]) // step_size, k]

      ff = (1440.0 * fill_factors[k])
      nf = new_flows[i, 0, k+1]
      change_in_hwl[i, 0, k] = (upstream_total_flow[i, 0, k] - nf) / ff + hwls[k]

    for j in range(1, n_j):
      for k in range(n_k):
        ff = (1440.0 * fill_factors[k])
        nf = new_flows[i, j // step_size, k+1]
        change_in_hwl[i, j, k] = change_in_hwl[i, j-1, k] + (upstream_total_flow[i, j, k] - nf) / ff

  return change_in_hwl

n_i = 600
n_j = int(NUM_TIME_STEPS * TIME_STEP_DURATION)
n_k = 8
upstream_total_flow_arr = np.zeros((n_i, n_j, n_k), dtype=float)
change_in_hwl_arr = np.zeros((n_i, n_j, n_k), dtype=float)

def wrap_hwl_calc(flow_history, new_flows, hwls, tribs, minutes):
  res = calculate_new_hwl_new(flow_history, new_flows, hwls, tribs, minutes, upstream_total_flow_arr, change_in_hwl_arr)

  return res

# COMMAND ----------

time_steps_selected = [0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 27, 31, 35, 39, 43, 47]

def generate_features(river_state, forecasts, action_set):
  current_hwl = np.tile(river_state[np.newaxis, -1, 18:26], (action_set.shape[0], NUM_TIME_STEPS, 1))
  new_mw = None

  current_mw = np.minimum(river_state[-1, 2:10], river_state[-1, 42:50])

  # NUM_HALF_HOUR_FEATURES = 8
  # NUM_TWO_HOUR_FEATURES = NUM_TIME_STEPS - NUM_HALF_HOUR_FEATURES

  for iteration in range(2):
    new_mw, new_flows, _ = get_new_mw_flows_spills(
      current_mw, 
      np.mean(forecasts[:(NUM_TIME_STEPS * TIME_STEP_DURATION), 0].reshape(-1, TIME_STEP_DURATION), axis=-1), 
      river_state[-1, [0, 10, 11, 12, 13, 14, 15, 16, 17]], 
      current_hwl, 
      action_set, 
      forecasts[:(NUM_TIME_STEPS * TIME_STEP_DURATION):TIME_STEP_DURATION, 9:17],
      new_mw=new_mw)

    current_hwl_all = wrap_hwl_calc(river_state[-720:, [0, 26, 27, 28, 29 ,30, 31, 32, 33]], new_flows, river_state[-1, 18:26], river_state[-720:, 34:42], 720)

    new_hwl = current_hwl_all[:, 0:(NUM_TIME_STEPS * TIME_STEP_DURATION):TIME_STEP_DURATION, :]

    current_hwl = new_hwl

  fc_distance_to_min = np.log(np.clip(current_hwl[..., 1:] - min_hwl[np.newaxis, np.newaxis, 1:], 1e-2, 1.0))
  fc_distance_to_max = np.log(np.clip(max_hwl[np.newaxis, np.newaxis, 1:] - current_hwl[..., 1:], 1e-2, 1.0))

  low_demand = (np.mean(forecasts[:(NUM_TIME_STEPS * TIME_STEP_DURATION), 0]) < 330.0).astype(float)
  high_demand = (np.mean(forecasts[:(NUM_TIME_STEPS * TIME_STEP_DURATION), 0]) > 610.0).astype(float)

  flows = np.repeat(new_flows[..., 1:], TIME_STEP_DURATION, axis=1)
  
  energy_after = total_potential_energy(current_hwl[:, -1, :], flows)
  energy_from_min = np.log(np.maximum(energy_after - 0.68, 0.1))[:, np.newaxis]
  energy_from_max = np.log(np.maximum(1.1 - energy_after, 0.1))[:, np.newaxis]

  lost_gwh_for_projection = np.sum(new_flows[..., 1:] * mw_per_cumec_benchmark - new_mw, axis=-1) / 1000

  ob_scaled = np.concatenate((
    fc_distance_to_min,
    fc_distance_to_max,
    (fc_distance_to_min * low_demand)[:, :, -1, np.newaxis],
    (fc_distance_to_max * low_demand)[:, :, 0, np.newaxis],
    (fc_distance_to_min * high_demand)[:, :, 0, np.newaxis],
    (fc_distance_to_max * high_demand)[:, :, 4, np.newaxis],
    # (fc_distance_to_min * low_demand),
    # (fc_distance_to_max * low_demand),
    # (fc_distance_to_min * high_demand),
    # (fc_distance_to_max * high_demand),
    np.tile(energy_from_min[:, np.newaxis, :], (1, NUM_TIME_STEPS, 1)),
    np.tile(energy_from_max[:, np.newaxis, :], (1, NUM_TIME_STEPS, 1)),
    lost_gwh_for_projection[:, :, np.newaxis]
  ), axis=-1)

  return ob_scaled

# COMMAND ----------

class RiverEnv():
  def __init__(self, action_set):
    self._episode_ended = False
    self.forecast_index = 0
    self.forecast_length = 10000
    self.action_set = action_set.copy()
    self.chosen_index = np.random.choice(setpoints_arr.shape[0] - STATE_HISTORY - self.forecast_length - 3600) + STATE_HISTORY
    self._state = setpoints_arr[(self.chosen_index - STATE_HISTORY):(self.chosen_index), :].copy()

    #Adjust values that are very close to infeasibility
    self._state[-1, 2:10] = np.minimum(np.maximum(self._state[-1, 2:10], min_mw), max_mw)
    self._state[-1, 18:26] = np.minimum(np.maximum(self._state[-1, 18:26], min_hwl + 0.2), max_hwl - 0.2)
    self._state[-1, 1] = np.sum(self._state[-1, 2:10])
    self._state[-1, 10:18] = np.maximum(min_flow[1:] - self._state[-1, 2:10] * k_factors, self._state[-1, 10:18])

    self.forecast = setpoints_arr[self.chosen_index:(self.chosen_index+self.forecast_length+3600), [1, 34 ,35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]].copy()

    self.metrics = {'Episode Length': 0, 'Lost MWh': 0}

  def reset(self, index=None):
    if index:
      self.chosen_index = index
    else:
      self.chosen_index = np.random.choice(setpoints_arr.shape[0] - STATE_HISTORY - self.forecast_length - 3600) + STATE_HISTORY
      
    self._state = setpoints_arr[(self.chosen_index - STATE_HISTORY):(self.chosen_index), :].copy()

    #Adjust values that are very close to infeasibility
    self._state[-1, 2:10] = np.minimum(np.maximum(self._state[-1, 2:10], min_mw), max_mw)
    self._state[-1, 18:26] = np.minimum(np.maximum(self._state[-1, 18:26], min_hwl + 0.2), max_hwl - 0.2)
    self._state[-1, 1] = np.sum(self._state[-1, 2:10])
    self._state[-1, 10:18] = np.maximum(min_flow[1:] - self._state[-1, 2:10] * k_factors, self._state[-1, 10:18])

    self.forecast = setpoints_arr[self.chosen_index:(self.chosen_index+self.forecast_length+3600), [1, 34 ,35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]].copy()
    self.forecast_index = 0
    self._episode_ended = False

    self.metrics = {'Episode Length': 0, 'Lost MWh': 0}

    ob_scaled = generate_features(self._state, self.forecast[self.forecast_index:(self.forecast_index+(NUM_TIME_STEPS * TIME_STEP_DURATION)), :], self.action_set)
    
    return ob_scaled, 0

  def _step(self, action, log=0, use_modelled_flow=True):
    if self._episode_ended:
      return self.reset()
    
    assert not np.any(np.isnan(self._state)), "state contains nan values"
    
    # try:
    minutes_to_simulate = np.minimum(np.argmax(self.forecast[(self.forecast_index):-1, 0] != self.forecast[(self.forecast_index+1):, 0]) + 1, 10)

    #if outside hwl ranges, end episode
    hwl_above_min = self._state[-1, 18:26] - min_hwl
    hwl_below_max = max_hwl - self._state[-1, 18:26]

    if np.any(hwl_above_min < 0):
      if log >= 2:
        print(datetime.now(), "MIN HWL BREACH AT: ", stations[np.argmin(hwl_above_min)], ' TIME: ', self.forecast_index, ' SEED: ', self.chosen_index,  file=open(RESULTS_FILE, 'a'))
      self._episode_ended = True

    if np.any(hwl_below_max < 0):
      if log >= 2:
        print(datetime.now(), "MAX HWL BREACH AT: ", stations[np.argmin(hwl_below_max)], ' TIME: ', self.forecast_index, ' SEED: ', self.chosen_index,  file=open(RESULTS_FILE, 'a'))
      self._episode_ended = True

    current_mw = np.minimum(self._state[-1, 2:10], self._state[-1, 42:50])

    if action >= 0:
      new_mw, new_flows, new_spills = get_new_mw_flows_spills(current_mw, np.array([self.forecast[self.forecast_index, 0]]), self._state[-1, [0, 10, 11, 12, 13, 14, 15, 16, 17]], self._state[-1, 18:26], self.action_set, np.array([self.forecast[self.forecast_index, 9:17]]))

      mw_next = new_mw[action, 0, :]
      next_spill_flows = new_spills[action, 0, 1:]
      next_tpo_flow = new_spills[action, 0, 0]
      station_total_flow = new_flows[action, 0, 1:]

    else: # action == -1 means to assign mw to stations using function that ensures feasibility. Only used when no other feasible action is available
      new_mw, new_flows, new_spills = get_new_mw_flows_spills(
        current_mw, 
        np.array([self.forecast[self.forecast_index, 0]]), 
        self._state[-1, [0, 10, 11, 12, 13, 14, 15, 16, 17]], 
        self._state[-1, 18:26], 
        self.action_set,
         np.array([self.forecast[self.forecast_index, 9:17]]),
        no_feasible_actions=True)

      mw_next = new_mw[0, 0, :]
      next_spill_flows = new_spills[0, 0, 1:]
      next_tpo_flow = new_spills[0, 0, 0]
      station_total_flow = new_flows[0, 0, 1:]

    if np.any(station_total_flow >= 1000) and (log >= 2):
      print(datetime.now(), station_total_flow, mw_next, self._state[-1, 18:26],  file=open(RESULTS_FILE, 'a'))

    if np.any(mw_next < min_mw):
      if log >= 2:
        print(datetime.now(), 'BELOW ZERO', stations[np.argmin(mw_next - min_mw)],  file=open(RESULTS_FILE, 'a'))
      self._episode_ended = True

    if np.any(mw_next >  np.array([self.forecast[self.forecast_index, 9:17]])):
      if log >= 2:
        print(datetime.now(), 'ABOVE MAX', stations[np.argmax(mw_next -  np.array([self.forecast[self.forecast_index, 9:17]]))],  file=open(RESULTS_FILE, 'a'))
      self._episode_ended = True

    if np.any(station_total_flow < min_flow[1:]):
      if log >= 2:
        print(datetime.now(), 'BELOW MIN FLOW', stations[np.argmin(station_total_flow - min_flow[1:])],  file=open(RESULTS_FILE, 'a'))
        print(datetime.now(), self.chosen_index, mw_next, next_spill_flows,  file=open(RESULTS_FILE, 'a'))
      self._episode_ended = True

    new_hwl = wrap_hwl_calc(self._state[-720:, [0, 26, 27, 28, 29 ,30, 31, 32, 33]], 
                      np.tile(np.reshape(np.concatenate((np.array([next_tpo_flow]), station_total_flow)), (1, 1, 9)), (self.action_set.shape[0], NUM_TIME_STEPS, 1)), 
                      self._state[-1, 18:26], 
                      self._state[-720:, 34:42], 
                      360)[0, :minutes_to_simulate, :]
    
    #calculate new state
    new_rows = np.zeros((minutes_to_simulate, self._state.shape[1]), dtype=np.float32)

    new_rows[:, 0] = next_tpo_flow
    new_rows[:, 1] = self.forecast[self.forecast_index:(self.forecast_index + minutes_to_simulate), 0]
    new_rows[:, 2:10] = mw_next[np.newaxis, :]
    new_rows[:, 10:18] = next_spill_flows[np.newaxis, :]
    new_rows[:, 18:26] = np.minimum(np.maximum(new_hwl, min_hwl-0.1), max_hwl + 0.1)
    new_rows[:, 26:34] = station_total_flow[np.newaxis, :]
    new_rows[:, 34:42] = self.forecast[self.forecast_index:(self.forecast_index + minutes_to_simulate), 1:9]
    new_rows[:, 42:50] = self.forecast[self.forecast_index:(self.forecast_index + minutes_to_simulate), 9:17]

    new_rows[:, 18] = 337.5

    self._state = np.concatenate((self._state, new_rows), axis=0)

    mw_next = np.minimum(mw_next, self._state[-1, 42:50])
    
    #update forecast
    self.forecast_index = self.forecast_index + minutes_to_simulate

    if self.forecast_index >= self.forecast_length:
      if log >= 2:
        print(datetime.now(), 'Finished Episode',  file=open(RESULTS_FILE, 'a'))
      self._episode_ended = True
    
    lost_mw_step = self._state[-1, 26:34] * mw_per_cumec_benchmark[np.newaxis, :] - mw_next
    lost_mwh_step = lost_mw_step * minutes_to_simulate / 60.0

    ob_scaled = generate_features(self._state, self.forecast[self.forecast_index:(self.forecast_index+(NUM_TIME_STEPS * TIME_STEP_DURATION)), :], self.action_set)

    if self._episode_ended:
      reward = END_OF_EPISODE_PENALTY if self.forecast_index < (self.forecast_length - 500) else 0

      return ob_scaled, reward #ts.termination(ob_scaled, reward)
    else:
      self.metrics['Episode Length'] += minutes_to_simulate
      self.metrics['Lost MWh'] += np.sum(lost_mwh_step)

      reward = -np.sum(lost_mwh_step) * EFFICIENCY_WEIGHTING
      return ob_scaled, reward #ts.transition(ob_scaled, reward=reward, discount=1.0)

# COMMAND ----------

env = RiverEnv(combined_action_pool)

ob, reward = env.reset()

def test_model(ob):
  action = np.argmax(np.sum(np.min(ob, axis=1), axis=1))

  return action

test_model(ob)

# COMMAND ----------

env = RiverEnv(combined_action_pool)

ob, reward = env.reset()

while not env._episode_ended:
  action = test_model(ob)

  ob, reward = env._step(action, log=2)

env.metrics['Episode Length']

# COMMAND ----------

def highest_value_action(ob, model_to_use):
  values = np.array(model_to_use(ob)[:, 0])

  return np.argmax(values)

def random_feasible_action(ob):
  return np.random.choice(ob.shape[0])

# COMMAND ----------

def run_episode(model, environment, action_set_deprecated, replay_buffer=None, buffer_index=None, epsilon_greedy=0.1, L1penalty=1e-3, L2penalty=1e-2, training=True, storing_replay_buffer=True, trainable=np.ones((NUM_FEATURES,)), first_run=False, index=None, log=0):
  # alpha = 1e-3
  discount = 0.995
  batch_size = 1024
  features = []
  actions = []
  reward = []
  ob, r = environment.reset(index=index)
  end_of_episode = False
  step_reward = r

  num_actions = environment.action_set.shape[0]

  while not end_of_episode:
    i = environment.forecast_index + environment.chosen_index
    
    #Choose action that gives highest approximated value
    if np.random.rand(1) >= epsilon_greedy:
      action = highest_value_action(ob, model)

      features.append(ob)
      actions.append(action)
      reward.append(step_reward)
    else:
      action = random_feasible_action(ob)

      features.append(ob)
      actions.append(action)
      reward.append(step_reward)

    ob, r = environment._step(action, log=log)

    step_reward = r

    if environment._episode_ended:
      end_of_episode = True
      features.append(ob)
      actions.append(action)
      reward.append(step_reward)

  lost_mwh = environment.metrics['Lost MWh']
  steps_taken = environment.metrics['Episode Length']

  if storing_replay_buffer:
    G = 0
    for f in range(len(features)-1, 0-1, -1):
      a = actions[f]
      if a == -1:
        continue
      
      x = features[f]
      G = discount * G + reward[f]

      replay_buffer[buffer_index, :] = np.zeros((NUM_FEATURES + 1,), dtype=np.float32)
      replay_buffer[buffer_index, :NUM_FEATURES] = np.reshape(x[a, :, :], (NUM_FEATURES,))
      # replay_buffer[buffer_index, -num_actions - 1 + a] = 1.0
      replay_buffer[buffer_index, -1] = G

      buffer_index = buffer_index + 1 if buffer_index < (REPLAY_BUFFER_SIZE-1) else 0

  if training:
    batch_selection = np.random.choice(buffer_index if first_run else REPLAY_BUFFER_SIZE, batch_size)
    current_batch = replay_buffer[batch_selection, :]
  
    # X_all_actions = np.reshape(current_batch[:, :(num_actions*NUM_FEATURES)], (batch_size, num_actions, NUM_TIME_STEPS, NUM_CHANNELS))
    X_batch = np.reshape(current_batch[:, :NUM_FEATURES], (batch_size, NUM_TIME_STEPS, NUM_CHANNELS))
    # A_batch = np.argmax(current_batch[:, (-num_actions - 1):-1], axis=1)
    G_batch = current_batch[:, -1]
    # X_batch = X_all_actions[range(batch_size), A_batch, :, :] #* trainable[np.newaxis, :]

    model.fit(X_batch, G_batch, batch_size=batch_size, epochs=1, verbose=0)

    # weights = weights + alpha * np.sum(((G_batch - np.dot(X_batch, weights))[:, np.newaxis] * X_batch), axis=0) - alpha * (L1penalty * np.sign(weights) + L2penalty * weights)
    
    # weights = weights + alpha * (G - np.dot(weights, x[a, :])) * x[a, :] * trainable - alpha * (L1penalty * np.sign(weights) + L2penalty * weights)

  return steps_taken, lost_mwh, replay_buffer, buffer_index

# COMMAND ----------

combined_action_pool.shape

# COMMAND ----------

# model = model_loaded

# COMMAND ----------

if TRAINING:

  best_run_time = 0
  best_efficiency = 999
  best_model = None

  # for action_pool in [action_pool_50]: # [action_pool_50, action_pool_10, action_pool_20]:
  #   for spill_pool in [spill_pool_20]:
  for layer_size in [50]:
    for num_layers in [0]:

      # if layer_size == 10 and num_layers == 1:
      #   continue

      current_actions = combined_action_pool# np.concatenate([np.tile(action_pool, (spill_pool.shape[0], 1)), np.repeat(spill_pool, action_pool.shape[0], axis=0)], axis=1)

      env = RiverEnv(current_actions.copy())

      weight_res = np.zeros((NUM_FEATURES,))

      # for tw in range(11, NUM_FEATURES):
      # tw = 30

      replay_buffer = np.zeros((REPLAY_BUFFER_SIZE, NUM_FEATURES+1)) #*env.action_set.shape[0]+env.action_set.shape[0]
      buffer_index = 0

      input = tf.keras.Input(shape=(NUM_TIME_STEPS, NUM_CHANNELS))

      batch_size = tf.shape(input)[0]

      dummy_input = tf.zeros((batch_size, 1))
      decay_factors = tf.keras.layers.Dense(NUM_CHANNELS, name='decay_layer', kernel_initializer=tf.keras.initializers.Zeros(), bias_constraint=tf.keras.constraints.NonNeg())(dummy_input)
      time_steps = tf.tile(tf.reshape(tf.range(NUM_TIME_STEPS, dtype=tf.float32), (1, NUM_TIME_STEPS, 1)), (batch_size, 1, NUM_CHANNELS))

      multiplier = tf.math.exp(tf.expand_dims(-decay_factors, axis=1) * time_steps)

      # lstm1 = tf.keras.layers.LSTM(layer_size)(input)
      prev_layer = tf.reduce_sum(input * multiplier, axis=1)
      for l in range(num_layers):
        next_layer = tf.keras.layers.Dense(layer_size, activation='relu')(prev_layer)
        prev_layer = next_layer

      bnorm = tf.keras.layers.BatchNormalization(center=False, scale=False)(-prev_layer)

      #output = -tf.keras.layers.Dense(1, name='final_station_weighting', kernel_constraint=tf.keras.constraints.NonNeg())(bnorm)

      output = -tf.keras.layers.Dense(1, name='final_station_weighting', kernel_initializer=tf.keras.initializers.Constant(0.1), bias_initializer=tf.keras.initializers.Zeros(), kernel_constraint=tf.keras.constraints.NonNeg())(bnorm)
      
      model = tf.keras.Model(inputs=input, outputs=output)
      model.compile(loss=tf.keras.losses.MeanSquaredError(), optimizer=tf.keras.optimizers.SGD(LEARNING_RATE))

      model.layers[4].set_weights([np.zeros((1, 21)), 
                                    np.array([0, 0.2, 0.05, 0.05, 0.1, 0.05, 0.05, 
                                              0, 0.2, 0.05, 0.05, 0.1, 0.05, 0.05,
                                              0.05, 0, 0, 0.1,
                                              0, 0, 0.2])])
      
      trainable = np.ones((NUM_FEATURES,))

      results = []

      steps_arr = []
      lost_mwh_arr = []
      val_steps = []

      num_episodes = 1
      val_episodes = 75
      progress_episodes = 1

      first_run = True
      prev_buffer = buffer_index

      for episode in range(num_episodes):
        steps_taken, lost_mwh, replay_buffer, buffer_index = run_episode(model, env, env.action_set, replay_buffer=replay_buffer, buffer_index=buffer_index, trainable=trainable, first_run=first_run, training=True, index=train_indices[episode], log=0)

        if buffer_index < prev_buffer:
          first_run = False

        steps_arr.append(steps_taken)
        lost_mwh_arr.append(lost_mwh)

        if episode % progress_episodes == (progress_episodes-1):
          #Take a sample episodes using epsilon as zero            
          current_avg = sum(steps_arr)/len(steps_arr)

          print(datetime.now(), episode, current_avg, sum(lost_mwh_arr)/len(lost_mwh_arr),  file=open(RESULTS_FILE, 'a'))
          
          results.append(current_avg)

          steps_arr = []

          episode_results = [run_episode(model, env, env.action_set, epsilon_greedy=0, training=False, storing_replay_buffer=False, index=val_indices[i], log=0) for i in range(val_episodes)]

          run_time = [e[0] for e in episode_results]
          efficiency_res = [e[1] for e in episode_results]
          if np.mean(run_time) > best_run_time:
            best_run_time = np.mean(run_time)
            best_model = model
            best_efficiency = np.mean(efficiency_res)

            print(datetime.now(), "NEW BEST: ", best_run_time, best_efficiency, file=open(RESULTS_FILE, 'a'))

            model.save(OUTPUT_FILE)

            # dbutils.fs.cp("file:/model_decay_rl_2.keras", "/Volumes/dev_generation/digital_river/reinforcement_learning_model_files/model_decay_rl_2.keras")

          else:
            print(datetime.now(), "Lower than current best: ", np.mean(run_time), np.mean(efficiency_res), file=open(RESULTS_FILE, 'a'))

            # model = best_model

      print(datetime.now(), "RESULTS", action_pool.shape[0], spill_pool.shape[0], num_layers, layer_size, best_run_time, best_efficiency,  file=open(RESULTS_FILE, 'a'))
      # weight_res[tw] = np.mean(run_time)

else:
  best_model = tf.keras.models.load_model(OUTPUT_FILE)

# COMMAND ----------

# model = tf.keras.models.load_model("/Volumes/dev_generation/digital_river/reinforcement_learning_model_files/model_decay_rl_1.keras")

# COMMAND ----------

def get_validation_results(current_env, num_episodes):
  episode_results = [run_episode(best_model, current_env, current_env.action_set, epsilon_greedy=0, training=False, storing_replay_buffer=False, index=val_indices[i], log=2) for i in range(num_episodes)]

  run_time = [e[0] for e in episode_results]
  efficiency_res = [e[1] for e in episode_results]

  return np.mean(run_time), np.mean(efficiency_res)

# COMMAND ----------

print(datetime.now(), get_validation_results(env, 75),  file=open(RESULTS_FILE, 'a'))

# COMMAND ----------


